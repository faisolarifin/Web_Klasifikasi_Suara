INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.22.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:16:55] "[35m[1mGET /ds HTTP/1.1[0m" 500 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:16:55] "GET /ds?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:16:55] "GET /ds?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:16:55] "GET /ds?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:16:55] "GET /ds?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1" 200 -
INFO:werkzeug: * Detected change in 'D:\\Freelance Project\\Web_Klasifikasi_Suara\\app.py', reloading
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.22.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:36] "GET /ds HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:37] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:37] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:37] "GET /static/vendor/datatables/dataTables.bootstrap4.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:37] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:37] "GET /static/vendor/datatables/dataTables.bootstrap4.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:37] "GET /static/vendor/datatables/jquery.dataTables.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:40] "GET /training HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:40] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:40] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:40] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:17:40] "GET /static/grafik/train_chart.png HTTP/1.1" 200 -
INFO:werkzeug:192.168.22.141 - - [31/May/2022 11:18:08] "GET /static/error.log HTTP/1.1" 200 -
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.201.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:53] "GET / HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:54] "GET /static/js/app.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:54] "GET /static/js/recorder.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:54] "GET /static/css/style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:54] "GET /static/buffer.gif HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:55] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:56] "GET /login HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:56] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:16:59] "[32mPOST /login HTTP/1.1[0m" 302 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:00] "GET /ds HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:00] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:00] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:00] "GET /static/vendor/datatables/dataTables.bootstrap4.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:00] "GET /static/vendor/datatables/jquery.dataTables.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:00] "GET /static/vendor/datatables/dataTables.bootstrap4.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:00] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:03] "[35m[1mGET /training HTTP/1.1[0m" 500 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:03] "GET /training?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:03] "GET /training?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:03] "GET /training?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:03] "GET /training?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:17:26] "GET /trainmodel HTTP/1.1" 200 -
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.201.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:38] "GET / HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:38] "GET /static/js/app.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:38] "GET /static/js/recorder.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:38] "GET /static/css/style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:38] "GET /static/buffer.gif HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:42] "[35m[1mGET /training HTTP/1.1[0m" 500 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:42] "GET /training?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:42] "GET /training?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:18:42] "GET /training?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1" 200 -
INFO:werkzeug: * Detected change in 'D:\\Freelance Project\\Web_Klasifikasi_Suara\\app.py', reloading
INFO:werkzeug: * Restarting with stat
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.201.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:20:14] "[35m[1mGET /training HTTP/1.1[0m" 500 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:20:15] "GET /training?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:20:15] "GET /training?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:20:15] "GET /training?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1" 200 -
INFO:werkzeug: * Detected change in 'D:\\Freelance Project\\Web_Klasifikasi_Suara\\app.py', reloading
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.201.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:01] "[35m[1mGET /training HTTP/1.1[0m" 500 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:01] "GET /training?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:01] "GET /training?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:01] "GET /training?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1" 200 -
INFO:werkzeug: * Detected change in 'D:\\Freelance Project\\Web_Klasifikasi_Suara\\app.py', reloading
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.201.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:26] "[35m[1mGET /training HTTP/1.1[0m" 500 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:27] "GET /training?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:27] "GET /training?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:27] "GET /training?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:21:32] "GET /trainmodel HTTP/1.1" 200 -
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=10)
           2	LOAD_GLOBAL(arg=0, lineno=10)
           4	LOAD_CONST(arg=1, lineno=10)
           6	LOAD_FAST(arg=2, lineno=10)
           8	CALL_FUNCTION(arg=2, lineno=10)
          10	STORE_FAST(arg=6, lineno=10)
          12	LOAD_CONST(arg=1, lineno=11)
          14	LOAD_FAST(arg=2, lineno=11)
          16	BINARY_TRUE_DIVIDE(arg=None, lineno=11)
          18	STORE_FAST(arg=7, lineno=11)
          20	LOAD_GLOBAL(arg=1, lineno=12)
          22	LOAD_FAST(arg=6, lineno=12)
          24	LOAD_FAST(arg=5, lineno=12)
          26	BINARY_MULTIPLY(arg=None, lineno=12)
          28	CALL_FUNCTION(arg=1, lineno=12)
          30	STORE_FAST(arg=8, lineno=12)
          32	LOAD_CONST(arg=2, lineno=13)
          34	STORE_FAST(arg=9, lineno=13)
          36	LOAD_CONST(arg=3, lineno=15)
          38	STORE_FAST(arg=10, lineno=15)
          40	LOAD_CONST(arg=2, lineno=16)
          42	STORE_FAST(arg=11, lineno=16)
          44	LOAD_CONST(arg=2, lineno=17)
          46	STORE_FAST(arg=12, lineno=17)
          48	LOAD_CONST(arg=3, lineno=18)
          50	STORE_FAST(arg=13, lineno=18)
          52	LOAD_CONST(arg=2, lineno=19)
          54	STORE_FAST(arg=14, lineno=19)
          56	LOAD_CONST(arg=2, lineno=20)
          58	STORE_FAST(arg=15, lineno=20)
          60	LOAD_FAST(arg=3, lineno=22)
          62	LOAD_ATTR(arg=2, lineno=22)
          64	LOAD_CONST(arg=3, lineno=22)
          66	BINARY_SUBSCR(arg=None, lineno=22)
          68	STORE_FAST(arg=16, lineno=22)
          70	LOAD_FAST(arg=0, lineno=23)
          72	LOAD_ATTR(arg=2, lineno=23)
          74	LOAD_CONST(arg=3, lineno=23)
          76	BINARY_SUBSCR(arg=None, lineno=23)
          78	STORE_FAST(arg=17, lineno=23)
          80	LOAD_FAST(arg=1, lineno=24)
          82	LOAD_ATTR(arg=2, lineno=24)
          84	LOAD_CONST(arg=3, lineno=24)
          86	BINARY_SUBSCR(arg=None, lineno=24)
          88	STORE_FAST(arg=18, lineno=24)
          90	LOAD_FAST(arg=1, lineno=25)
          92	LOAD_ATTR(arg=2, lineno=25)
          94	LOAD_CONST(arg=4, lineno=25)
          96	BINARY_SUBSCR(arg=None, lineno=25)
          98	STORE_FAST(arg=19, lineno=25)
         100	LOAD_GLOBAL(arg=3, lineno=27)
         102	LOAD_FAST(arg=18, lineno=27)
         104	CALL_FUNCTION(arg=1, lineno=27)
         106	GET_ITER(arg=None, lineno=27)
>        108	FOR_ITER(arg=170, lineno=27)
         110	STORE_FAST(arg=20, lineno=27)
         112	LOAD_GLOBAL(arg=1, lineno=29)
         114	LOAD_FAST(arg=9, lineno=29)
         116	CALL_FUNCTION(arg=1, lineno=29)
         118	STORE_FAST(arg=10, lineno=29)
         120	LOAD_FAST(arg=6, lineno=32)
         122	LOAD_FAST(arg=9, lineno=32)
         124	LOAD_FAST(arg=10, lineno=32)
         126	BINARY_SUBTRACT(arg=None, lineno=32)
         128	BINARY_MULTIPLY(arg=None, lineno=32)
         130	STORE_FAST(arg=11, lineno=32)
         132	LOAD_FAST(arg=11, lineno=35)
         134	LOAD_FAST(arg=5, lineno=35)
         136	BINARY_MULTIPLY(arg=None, lineno=35)
         138	STORE_FAST(arg=12, lineno=35)
         140	LOAD_GLOBAL(arg=1, lineno=36)
         142	LOAD_FAST(arg=12, lineno=36)
         144	CALL_FUNCTION(arg=1, lineno=36)
         146	STORE_FAST(arg=13, lineno=36)
         148	LOAD_FAST(arg=12, lineno=39)
         150	LOAD_FAST(arg=13, lineno=39)
         152	BINARY_SUBTRACT(arg=None, lineno=39)
         154	STORE_FAST(arg=14, lineno=39)
         156	LOAD_GLOBAL(arg=0, lineno=42)
         158	LOAD_FAST(arg=10, lineno=42)
         160	LOAD_CONST(arg=4, lineno=42)
         162	BINARY_ADD(arg=None, lineno=42)
         164	LOAD_FAST(arg=16, lineno=42)
         166	LOAD_FAST(arg=13, lineno=42)
         168	BINARY_SUBTRACT(arg=None, lineno=42)
         170	LOAD_FAST(arg=8, lineno=42)
         172	BINARY_FLOOR_DIVIDE(arg=None, lineno=42)
         174	CALL_FUNCTION(arg=2, lineno=42)
         176	STORE_FAST(arg=21, lineno=42)
         178	LOAD_GLOBAL(arg=3, lineno=43)
         180	LOAD_FAST(arg=21, lineno=43)
         182	CALL_FUNCTION(arg=1, lineno=43)
         184	GET_ITER(arg=None, lineno=43)
>        186	FOR_ITER(arg=45, lineno=43)
         188	STORE_FAST(arg=22, lineno=43)
         190	LOAD_FAST(arg=3, lineno=45)
         192	LOAD_FAST(arg=13, lineno=45)
         194	LOAD_FAST(arg=22, lineno=45)
         196	LOAD_FAST(arg=8, lineno=45)
         198	BINARY_MULTIPLY(arg=None, lineno=45)
         200	BINARY_ADD(arg=None, lineno=45)
         202	BINARY_SUBSCR(arg=None, lineno=45)
         204	LOAD_FAST(arg=14, lineno=45)
         206	LOAD_FAST(arg=4, lineno=45)
         208	LOAD_FAST(arg=13, lineno=45)
         210	LOAD_FAST(arg=22, lineno=45)
         212	LOAD_FAST(arg=8, lineno=45)
         214	BINARY_MULTIPLY(arg=None, lineno=45)
         216	BINARY_ADD(arg=None, lineno=45)
         218	BINARY_SUBSCR(arg=None, lineno=45)
         220	BINARY_MULTIPLY(arg=None, lineno=45)
         222	BINARY_ADD(arg=None, lineno=45)
         224	STORE_FAST(arg=15, lineno=45)
         226	LOAD_GLOBAL(arg=3, lineno=46)
         228	LOAD_FAST(arg=19, lineno=46)
         230	CALL_FUNCTION(arg=1, lineno=46)
         232	GET_ITER(arg=None, lineno=46)
>        234	FOR_ITER(arg=20, lineno=46)
         236	STORE_FAST(arg=23, lineno=46)
         238	LOAD_FAST(arg=1, lineno=47)
         240	LOAD_FAST(arg=20, lineno=47)
         242	LOAD_FAST(arg=23, lineno=47)
         244	BUILD_TUPLE(arg=2, lineno=47)
         246	DUP_TOP_TWO(arg=None, lineno=47)
         248	BINARY_SUBSCR(arg=None, lineno=47)
         250	LOAD_FAST(arg=15, lineno=47)
         252	LOAD_FAST(arg=0, lineno=47)
         254	LOAD_FAST(arg=10, lineno=47)
         256	LOAD_FAST(arg=22, lineno=47)
         258	BINARY_SUBTRACT(arg=None, lineno=47)
         260	LOAD_FAST(arg=23, lineno=47)
         262	BUILD_TUPLE(arg=2, lineno=47)
         264	BINARY_SUBSCR(arg=None, lineno=47)
         266	BINARY_MULTIPLY(arg=None, lineno=47)
         268	INPLACE_ADD(arg=None, lineno=47)
         270	ROT_THREE(arg=None, lineno=47)
         272	STORE_SUBSCR(arg=None, lineno=47)
         274	JUMP_ABSOLUTE(arg=118, lineno=47)
>        276	JUMP_ABSOLUTE(arg=94, lineno=46)
>        278	LOAD_FAST(arg=6, lineno=50)
         280	LOAD_FAST(arg=11, lineno=50)
         282	BINARY_SUBTRACT(arg=None, lineno=50)
         284	STORE_FAST(arg=11, lineno=50)
         286	LOAD_FAST(arg=11, lineno=53)
         288	LOAD_FAST(arg=5, lineno=53)
         290	BINARY_MULTIPLY(arg=None, lineno=53)
         292	STORE_FAST(arg=12, lineno=53)
         294	LOAD_GLOBAL(arg=1, lineno=54)
         296	LOAD_FAST(arg=12, lineno=54)
         298	CALL_FUNCTION(arg=1, lineno=54)
         300	STORE_FAST(arg=13, lineno=54)
         302	LOAD_FAST(arg=12, lineno=57)
         304	LOAD_FAST(arg=13, lineno=57)
         306	BINARY_SUBTRACT(arg=None, lineno=57)
         308	STORE_FAST(arg=14, lineno=57)
         310	LOAD_GLOBAL(arg=0, lineno=60)
         312	LOAD_FAST(arg=17, lineno=60)
         314	LOAD_FAST(arg=10, lineno=60)
         316	BINARY_SUBTRACT(arg=None, lineno=60)
         318	LOAD_CONST(arg=4, lineno=60)
         320	BINARY_SUBTRACT(arg=None, lineno=60)
         322	LOAD_FAST(arg=16, lineno=60)
         324	LOAD_FAST(arg=13, lineno=60)
         326	BINARY_SUBTRACT(arg=None, lineno=60)
         328	LOAD_FAST(arg=8, lineno=60)
         330	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         332	CALL_FUNCTION(arg=2, lineno=60)
         334	STORE_FAST(arg=24, lineno=60)
         336	LOAD_GLOBAL(arg=3, lineno=61)
         338	LOAD_FAST(arg=24, lineno=61)
         340	CALL_FUNCTION(arg=1, lineno=61)
         342	GET_ITER(arg=None, lineno=61)
>        344	FOR_ITER(arg=47, lineno=61)
         346	STORE_FAST(arg=25, lineno=61)
         348	LOAD_FAST(arg=3, lineno=62)
         350	LOAD_FAST(arg=13, lineno=62)
         352	LOAD_FAST(arg=25, lineno=62)
         354	LOAD_FAST(arg=8, lineno=62)
         356	BINARY_MULTIPLY(arg=None, lineno=62)
         358	BINARY_ADD(arg=None, lineno=62)
         360	BINARY_SUBSCR(arg=None, lineno=62)
         362	LOAD_FAST(arg=14, lineno=62)
         364	LOAD_FAST(arg=4, lineno=62)
         366	LOAD_FAST(arg=13, lineno=62)
         368	LOAD_FAST(arg=25, lineno=62)
         370	LOAD_FAST(arg=8, lineno=62)
         372	BINARY_MULTIPLY(arg=None, lineno=62)
         374	BINARY_ADD(arg=None, lineno=62)
         376	BINARY_SUBSCR(arg=None, lineno=62)
         378	BINARY_MULTIPLY(arg=None, lineno=62)
         380	BINARY_ADD(arg=None, lineno=62)
         382	STORE_FAST(arg=15, lineno=62)
         384	LOAD_GLOBAL(arg=3, lineno=63)
         386	LOAD_FAST(arg=19, lineno=63)
         388	CALL_FUNCTION(arg=1, lineno=63)
         390	GET_ITER(arg=None, lineno=63)
>        392	FOR_ITER(arg=22, lineno=63)
         394	STORE_FAST(arg=23, lineno=63)
         396	LOAD_FAST(arg=1, lineno=64)
         398	LOAD_FAST(arg=20, lineno=64)
         400	LOAD_FAST(arg=23, lineno=64)
         402	BUILD_TUPLE(arg=2, lineno=64)
         404	DUP_TOP_TWO(arg=None, lineno=64)
         406	BINARY_SUBSCR(arg=None, lineno=64)
         408	LOAD_FAST(arg=15, lineno=64)
         410	LOAD_FAST(arg=0, lineno=64)
         412	LOAD_FAST(arg=10, lineno=64)
         414	LOAD_FAST(arg=25, lineno=64)
         416	BINARY_ADD(arg=None, lineno=64)
         418	LOAD_CONST(arg=4, lineno=64)
         420	BINARY_ADD(arg=None, lineno=64)
         422	LOAD_FAST(arg=23, lineno=64)
         424	BUILD_TUPLE(arg=2, lineno=64)
         426	BINARY_SUBSCR(arg=None, lineno=64)
         428	BINARY_MULTIPLY(arg=None, lineno=64)
         430	INPLACE_ADD(arg=None, lineno=64)
         432	ROT_THREE(arg=None, lineno=64)
         434	STORE_SUBSCR(arg=None, lineno=64)
         436	JUMP_ABSOLUTE(arg=197, lineno=64)
>        438	JUMP_ABSOLUTE(arg=173, lineno=63)
>        440	LOAD_FAST(arg=9, lineno=67)
         442	LOAD_FAST(arg=7, lineno=67)
         444	INPLACE_ADD(arg=None, lineno=67)
         446	STORE_FAST(arg=9, lineno=67)
         448	JUMP_ABSOLUTE(arg=55, lineno=67)
>        450	LOAD_CONST(arg=0, lineno=27)
         452	RETURN_VALUE(arg=None, lineno=27)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=10)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=10)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=10)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=10)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=10)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$sample_ratio6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=STORE_FAST(arg=6, lineno=10)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=11)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=11)
DEBUG:numba.core.byteflow:stack ['$const12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=11)
DEBUG:numba.core.byteflow:stack ['$const12.4', '$sample_ratio14.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=STORE_FAST(arg=7, lineno=11)
DEBUG:numba.core.byteflow:stack ['$16binary_true_divide.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=12)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=6, lineno=12)
DEBUG:numba.core.byteflow:stack ['$20load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=5, lineno=12)
DEBUG:numba.core.byteflow:stack ['$20load_global.7', '$scale22.8']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=12)
DEBUG:numba.core.byteflow:stack ['$20load_global.7', '$scale22.8', '$num_table24.9']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=1, lineno=12)
DEBUG:numba.core.byteflow:stack ['$20load_global.7', '$26binary_multiply.10']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=8, lineno=12)
DEBUG:numba.core.byteflow:stack ['$28call_function.11']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=13)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=9, lineno=13)
DEBUG:numba.core.byteflow:stack ['$const32.12']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=15)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=STORE_FAST(arg=10, lineno=15)
DEBUG:numba.core.byteflow:stack ['$const36.13']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=16)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=STORE_FAST(arg=11, lineno=16)
DEBUG:numba.core.byteflow:stack ['$const40.14']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=17)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=12, lineno=17)
DEBUG:numba.core.byteflow:stack ['$const44.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=18)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=13, lineno=18)
DEBUG:numba.core.byteflow:stack ['$const48.16']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=19)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_FAST(arg=14, lineno=19)
DEBUG:numba.core.byteflow:stack ['$const52.17']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=STORE_FAST(arg=15, lineno=20)
DEBUG:numba.core.byteflow:stack ['$const56.18']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=22)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_ATTR(arg=2, lineno=22)
DEBUG:numba.core.byteflow:stack ['$interp_win60.19']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_CONST(arg=3, lineno=22)
DEBUG:numba.core.byteflow:stack ['$62load_attr.20']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=22)
DEBUG:numba.core.byteflow:stack ['$62load_attr.20', '$const64.21']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=STORE_FAST(arg=16, lineno=22)
DEBUG:numba.core.byteflow:stack ['$66binary_subscr.22']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_ATTR(arg=2, lineno=23)
DEBUG:numba.core.byteflow:stack ['$x70.23']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_CONST(arg=3, lineno=23)
DEBUG:numba.core.byteflow:stack ['$72load_attr.24']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=23)
DEBUG:numba.core.byteflow:stack ['$72load_attr.24', '$const74.25']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_FAST(arg=17, lineno=23)
DEBUG:numba.core.byteflow:stack ['$76binary_subscr.26']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=24)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_ATTR(arg=2, lineno=24)
DEBUG:numba.core.byteflow:stack ['$y80.27']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_CONST(arg=3, lineno=24)
DEBUG:numba.core.byteflow:stack ['$82load_attr.28']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=24)
DEBUG:numba.core.byteflow:stack ['$82load_attr.28', '$const84.29']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=STORE_FAST(arg=18, lineno=24)
DEBUG:numba.core.byteflow:stack ['$86binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=25)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_ATTR(arg=2, lineno=25)
DEBUG:numba.core.byteflow:stack ['$y90.31']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_CONST(arg=4, lineno=25)
DEBUG:numba.core.byteflow:stack ['$92load_attr.32']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=25)
DEBUG:numba.core.byteflow:stack ['$92load_attr.32', '$const94.33']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=STORE_FAST(arg=19, lineno=25)
DEBUG:numba.core.byteflow:stack ['$96binary_subscr.34']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_GLOBAL(arg=3, lineno=27)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=18, lineno=27)
DEBUG:numba.core.byteflow:stack ['$100load_global.35']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=27)
DEBUG:numba.core.byteflow:stack ['$100load_global.35', '$n_out102.36']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=GET_ITER(arg=None, lineno=27)
DEBUG:numba.core.byteflow:stack ['$104call_function.37']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=108, stack=('$106get_iter.38',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=108 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi108.0']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=FOR_ITER(arg=170, lineno=27)
DEBUG:numba.core.byteflow:stack ['$phi108.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=450, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=('$phi108.0', '$108for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=450 nstack_initial=0), State(pc_initial=110 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=450, inst=LOAD_CONST(arg=0, lineno=27)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=452, inst=RETURN_VALUE(arg=None, lineno=27)
DEBUG:numba.core.byteflow:stack ['$const450.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=110 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi110.0', '$phi110.1']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=STORE_FAST(arg=20, lineno=27)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$phi110.1']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_GLOBAL(arg=1, lineno=29)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_FAST(arg=9, lineno=29)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$112load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=29)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$112load_global.2', '$time_register114.3']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=STORE_FAST(arg=10, lineno=29)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$116call_function.4']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_FAST(arg=6, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=9, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$scale120.5']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_FAST(arg=10, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$scale120.5', '$time_register122.6']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=BINARY_SUBTRACT(arg=None, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$scale120.5', '$time_register122.6', '$n124.7']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=BINARY_MULTIPLY(arg=None, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$scale120.5', '$126binary_subtract.8']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=STORE_FAST(arg=11, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$128binary_multiply.9']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_FAST(arg=11, lineno=35)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_FAST(arg=5, lineno=35)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$frac132.10']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=BINARY_MULTIPLY(arg=None, lineno=35)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$frac132.10', '$num_table134.11']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=STORE_FAST(arg=12, lineno=35)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$136binary_multiply.12']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=36)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_FAST(arg=12, lineno=36)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$140load_global.13']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=CALL_FUNCTION(arg=1, lineno=36)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$140load_global.13', '$index_frac142.14']
DEBUG:numba.core.byteflow:dispatch pc=146, inst=STORE_FAST(arg=13, lineno=36)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$144call_function.15']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=39)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_FAST(arg=13, lineno=39)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$index_frac148.16']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=BINARY_SUBTRACT(arg=None, lineno=39)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$index_frac148.16', '$offset150.17']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=STORE_FAST(arg=14, lineno=39)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$152binary_subtract.18']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_GLOBAL(arg=0, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_FAST(arg=10, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=LOAD_CONST(arg=4, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$n158.20']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=BINARY_ADD(arg=None, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$n158.20', '$const160.21']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_FAST(arg=16, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=LOAD_FAST(arg=13, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$nwin164.23']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=BINARY_SUBTRACT(arg=None, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$nwin164.23', '$offset166.24']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=LOAD_FAST(arg=8, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$168binary_subtract.25']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$168binary_subtract.25', '$index_step170.26']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=CALL_FUNCTION(arg=2, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$172binary_floor_divide.27']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=STORE_FAST(arg=21, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$174call_function.28']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=LOAD_GLOBAL(arg=3, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=LOAD_FAST(arg=21, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$178load_global.29']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=CALL_FUNCTION(arg=1, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$178load_global.29', '$i_max180.30']
DEBUG:numba.core.byteflow:dispatch pc=184, inst=GET_ITER(arg=None, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$182call_function.31']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=186, stack=('$phi110.0', '$184get_iter.32'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=186 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi186.0', '$phi186.1']
DEBUG:numba.core.byteflow:dispatch pc=186, inst=FOR_ITER(arg=45, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi186.0', '$phi186.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=278, stack=('$phi186.0',), blockstack=(), npush=0), Edge(pc=188, stack=('$phi186.0', '$phi186.1', '$186for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=278 nstack_initial=1), State(pc_initial=188 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=278, inst=LOAD_FAST(arg=6, lineno=50)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=280, inst=LOAD_FAST(arg=11, lineno=50)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$scale278.1']
DEBUG:numba.core.byteflow:dispatch pc=282, inst=BINARY_SUBTRACT(arg=None, lineno=50)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$scale278.1', '$frac280.2']
DEBUG:numba.core.byteflow:dispatch pc=284, inst=STORE_FAST(arg=11, lineno=50)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$282binary_subtract.3']
DEBUG:numba.core.byteflow:dispatch pc=286, inst=LOAD_FAST(arg=11, lineno=53)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=288, inst=LOAD_FAST(arg=5, lineno=53)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$frac286.4']
DEBUG:numba.core.byteflow:dispatch pc=290, inst=BINARY_MULTIPLY(arg=None, lineno=53)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$frac286.4', '$num_table288.5']
DEBUG:numba.core.byteflow:dispatch pc=292, inst=STORE_FAST(arg=12, lineno=53)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$290binary_multiply.6']
DEBUG:numba.core.byteflow:dispatch pc=294, inst=LOAD_GLOBAL(arg=1, lineno=54)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=296, inst=LOAD_FAST(arg=12, lineno=54)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$294load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=298, inst=CALL_FUNCTION(arg=1, lineno=54)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$294load_global.7', '$index_frac296.8']
DEBUG:numba.core.byteflow:dispatch pc=300, inst=STORE_FAST(arg=13, lineno=54)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$298call_function.9']
DEBUG:numba.core.byteflow:dispatch pc=302, inst=LOAD_FAST(arg=12, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=304, inst=LOAD_FAST(arg=13, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$index_frac302.10']
DEBUG:numba.core.byteflow:dispatch pc=306, inst=BINARY_SUBTRACT(arg=None, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$index_frac302.10', '$offset304.11']
DEBUG:numba.core.byteflow:dispatch pc=308, inst=STORE_FAST(arg=14, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$306binary_subtract.12']
DEBUG:numba.core.byteflow:dispatch pc=310, inst=LOAD_GLOBAL(arg=0, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=312, inst=LOAD_FAST(arg=17, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13']
DEBUG:numba.core.byteflow:dispatch pc=314, inst=LOAD_FAST(arg=10, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$n_orig312.14']
DEBUG:numba.core.byteflow:dispatch pc=316, inst=BINARY_SUBTRACT(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$n_orig312.14', '$n314.15']
DEBUG:numba.core.byteflow:dispatch pc=318, inst=LOAD_CONST(arg=4, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$316binary_subtract.16']
DEBUG:numba.core.byteflow:dispatch pc=320, inst=BINARY_SUBTRACT(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$316binary_subtract.16', '$const318.17']
DEBUG:numba.core.byteflow:dispatch pc=322, inst=LOAD_FAST(arg=16, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18']
DEBUG:numba.core.byteflow:dispatch pc=324, inst=LOAD_FAST(arg=13, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$nwin322.19']
DEBUG:numba.core.byteflow:dispatch pc=326, inst=BINARY_SUBTRACT(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$nwin322.19', '$offset324.20']
DEBUG:numba.core.byteflow:dispatch pc=328, inst=LOAD_FAST(arg=8, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$326binary_subtract.21']
DEBUG:numba.core.byteflow:dispatch pc=330, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$326binary_subtract.21', '$index_step328.22']
DEBUG:numba.core.byteflow:dispatch pc=332, inst=CALL_FUNCTION(arg=2, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$330binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=334, inst=STORE_FAST(arg=24, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$332call_function.24']
DEBUG:numba.core.byteflow:dispatch pc=336, inst=LOAD_GLOBAL(arg=3, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=338, inst=LOAD_FAST(arg=24, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$336load_global.25']
DEBUG:numba.core.byteflow:dispatch pc=340, inst=CALL_FUNCTION(arg=1, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$336load_global.25', '$k_max338.26']
DEBUG:numba.core.byteflow:dispatch pc=342, inst=GET_ITER(arg=None, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$340call_function.27']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=344, stack=('$phi278.0', '$342get_iter.28'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=188 nstack_initial=3), State(pc_initial=344 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi188.0', '$phi188.1', '$phi188.2']
DEBUG:numba.core.byteflow:dispatch pc=188, inst=STORE_FAST(arg=22, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$phi188.2']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=LOAD_FAST(arg=3, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1']
DEBUG:numba.core.byteflow:dispatch pc=192, inst=LOAD_FAST(arg=13, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3']
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_FAST(arg=22, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$offset192.4']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$offset192.4', '$i194.5']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=BINARY_MULTIPLY(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$offset192.4', '$i194.5', '$index_step196.6']
DEBUG:numba.core.byteflow:dispatch pc=200, inst=BINARY_ADD(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$offset192.4', '$198binary_multiply.7']
DEBUG:numba.core.byteflow:dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$200binary_add.8']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=LOAD_FAST(arg=14, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=LOAD_FAST(arg=4, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10']
DEBUG:numba.core.byteflow:dispatch pc=208, inst=LOAD_FAST(arg=13, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11']
DEBUG:numba.core.byteflow:dispatch pc=210, inst=LOAD_FAST(arg=22, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$offset208.12']
DEBUG:numba.core.byteflow:dispatch pc=212, inst=LOAD_FAST(arg=8, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$offset208.12', '$i210.13']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$offset208.12', '$i210.13', '$index_step212.14']
DEBUG:numba.core.byteflow:dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$offset208.12', '$214binary_multiply.15']
DEBUG:numba.core.byteflow:dispatch pc=218, inst=BINARY_SUBSCR(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$216binary_add.16']
DEBUG:numba.core.byteflow:dispatch pc=220, inst=BINARY_MULTIPLY(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$218binary_subscr.17']
DEBUG:numba.core.byteflow:dispatch pc=222, inst=BINARY_ADD(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$220binary_multiply.18']
DEBUG:numba.core.byteflow:dispatch pc=224, inst=STORE_FAST(arg=15, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$222binary_add.19']
DEBUG:numba.core.byteflow:dispatch pc=226, inst=LOAD_GLOBAL(arg=3, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1']
DEBUG:numba.core.byteflow:dispatch pc=228, inst=LOAD_FAST(arg=19, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$226load_global.20']
DEBUG:numba.core.byteflow:dispatch pc=230, inst=CALL_FUNCTION(arg=1, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$226load_global.20', '$n_channels228.21']
DEBUG:numba.core.byteflow:dispatch pc=232, inst=GET_ITER(arg=None, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$230call_function.22']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=234, stack=('$phi188.0', '$phi188.1', '$232get_iter.23'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=344 nstack_initial=2), State(pc_initial=234 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi344.0', '$phi344.1']
DEBUG:numba.core.byteflow:dispatch pc=344, inst=FOR_ITER(arg=47, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi344.0', '$phi344.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=440, stack=('$phi344.0',), blockstack=(), npush=0), Edge(pc=346, stack=('$phi344.0', '$phi344.1', '$344for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=234 nstack_initial=3), State(pc_initial=440 nstack_initial=1), State(pc_initial=346 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi234.0', '$phi234.1', '$phi234.2']
DEBUG:numba.core.byteflow:dispatch pc=234, inst=FOR_ITER(arg=20, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi234.0', '$phi234.1', '$phi234.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=276, stack=('$phi234.0', '$phi234.1'), blockstack=(), npush=0), Edge(pc=236, stack=('$phi234.0', '$phi234.1', '$phi234.2', '$234for_iter.4'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=440 nstack_initial=1), State(pc_initial=346 nstack_initial=3), State(pc_initial=276 nstack_initial=2), State(pc_initial=236 nstack_initial=4)])
DEBUG:numba.core.byteflow:stack: ['$phi440.0']
DEBUG:numba.core.byteflow:dispatch pc=440, inst=LOAD_FAST(arg=9, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0']
DEBUG:numba.core.byteflow:dispatch pc=442, inst=LOAD_FAST(arg=7, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0', '$time_register440.1']
DEBUG:numba.core.byteflow:dispatch pc=444, inst=INPLACE_ADD(arg=None, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0', '$time_register440.1', '$time_increment442.2']
DEBUG:numba.core.byteflow:dispatch pc=446, inst=STORE_FAST(arg=9, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0', '$444inplace_add.3']
DEBUG:numba.core.byteflow:dispatch pc=448, inst=JUMP_ABSOLUTE(arg=55, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=108, stack=('$phi440.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=346 nstack_initial=3), State(pc_initial=276 nstack_initial=2), State(pc_initial=236 nstack_initial=4), State(pc_initial=108 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi346.0', '$phi346.1', '$phi346.2']
DEBUG:numba.core.byteflow:dispatch pc=346, inst=STORE_FAST(arg=25, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$phi346.2']
DEBUG:numba.core.byteflow:dispatch pc=348, inst=LOAD_FAST(arg=3, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1']
DEBUG:numba.core.byteflow:dispatch pc=350, inst=LOAD_FAST(arg=13, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3']
DEBUG:numba.core.byteflow:dispatch pc=352, inst=LOAD_FAST(arg=25, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$offset350.4']
DEBUG:numba.core.byteflow:dispatch pc=354, inst=LOAD_FAST(arg=8, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$offset350.4', '$k352.5']
DEBUG:numba.core.byteflow:dispatch pc=356, inst=BINARY_MULTIPLY(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$offset350.4', '$k352.5', '$index_step354.6']
DEBUG:numba.core.byteflow:dispatch pc=358, inst=BINARY_ADD(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$offset350.4', '$356binary_multiply.7']
DEBUG:numba.core.byteflow:dispatch pc=360, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$358binary_add.8']
DEBUG:numba.core.byteflow:dispatch pc=362, inst=LOAD_FAST(arg=14, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9']
DEBUG:numba.core.byteflow:dispatch pc=364, inst=LOAD_FAST(arg=4, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10']
DEBUG:numba.core.byteflow:dispatch pc=366, inst=LOAD_FAST(arg=13, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11']
DEBUG:numba.core.byteflow:dispatch pc=368, inst=LOAD_FAST(arg=25, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$offset366.12']
DEBUG:numba.core.byteflow:dispatch pc=370, inst=LOAD_FAST(arg=8, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$offset366.12', '$k368.13']
DEBUG:numba.core.byteflow:dispatch pc=372, inst=BINARY_MULTIPLY(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$offset366.12', '$k368.13', '$index_step370.14']
DEBUG:numba.core.byteflow:dispatch pc=374, inst=BINARY_ADD(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$offset366.12', '$372binary_multiply.15']
DEBUG:numba.core.byteflow:dispatch pc=376, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$374binary_add.16']
DEBUG:numba.core.byteflow:dispatch pc=378, inst=BINARY_MULTIPLY(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$376binary_subscr.17']
DEBUG:numba.core.byteflow:dispatch pc=380, inst=BINARY_ADD(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$378binary_multiply.18']
DEBUG:numba.core.byteflow:dispatch pc=382, inst=STORE_FAST(arg=15, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$380binary_add.19']
DEBUG:numba.core.byteflow:dispatch pc=384, inst=LOAD_GLOBAL(arg=3, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1']
DEBUG:numba.core.byteflow:dispatch pc=386, inst=LOAD_FAST(arg=19, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$384load_global.20']
DEBUG:numba.core.byteflow:dispatch pc=388, inst=CALL_FUNCTION(arg=1, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$384load_global.20', '$n_channels386.21']
DEBUG:numba.core.byteflow:dispatch pc=390, inst=GET_ITER(arg=None, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$388call_function.22']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=392, stack=('$phi346.0', '$phi346.1', '$390get_iter.23'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=276 nstack_initial=2), State(pc_initial=236 nstack_initial=4), State(pc_initial=108 nstack_initial=1), State(pc_initial=392 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi276.0', '$phi276.1']
DEBUG:numba.core.byteflow:dispatch pc=276, inst=JUMP_ABSOLUTE(arg=94, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi276.0', '$phi276.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=186, stack=('$phi276.0', '$phi276.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=236 nstack_initial=4), State(pc_initial=108 nstack_initial=1), State(pc_initial=392 nstack_initial=3), State(pc_initial=186 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi236.0', '$phi236.1', '$phi236.2', '$phi236.3']
DEBUG:numba.core.byteflow:dispatch pc=236, inst=STORE_FAST(arg=23, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$phi236.3']
DEBUG:numba.core.byteflow:dispatch pc=238, inst=LOAD_FAST(arg=1, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2']
DEBUG:numba.core.byteflow:dispatch pc=240, inst=LOAD_FAST(arg=20, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4']
DEBUG:numba.core.byteflow:dispatch pc=242, inst=LOAD_FAST(arg=23, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$t240.5']
DEBUG:numba.core.byteflow:dispatch pc=244, inst=BUILD_TUPLE(arg=2, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$t240.5', '$j242.6']
DEBUG:numba.core.byteflow:dispatch pc=246, inst=DUP_TOP_TWO(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=248, inst=BINARY_SUBSCR(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$246dup_top_two.8', '$246dup_top_two.9']
DEBUG:numba.core.byteflow:dispatch pc=250, inst=LOAD_FAST(arg=15, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=252, inst=LOAD_FAST(arg=0, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11']
DEBUG:numba.core.byteflow:dispatch pc=254, inst=LOAD_FAST(arg=10, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12']
DEBUG:numba.core.byteflow:dispatch pc=256, inst=LOAD_FAST(arg=22, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$n254.13']
DEBUG:numba.core.byteflow:dispatch pc=258, inst=BINARY_SUBTRACT(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$n254.13', '$i256.14']
DEBUG:numba.core.byteflow:dispatch pc=260, inst=LOAD_FAST(arg=23, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$258binary_subtract.15']
DEBUG:numba.core.byteflow:dispatch pc=262, inst=BUILD_TUPLE(arg=2, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$258binary_subtract.15', '$j260.16']
DEBUG:numba.core.byteflow:dispatch pc=264, inst=BINARY_SUBSCR(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$262build_tuple.17']
DEBUG:numba.core.byteflow:dispatch pc=266, inst=BINARY_MULTIPLY(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$264binary_subscr.18']
DEBUG:numba.core.byteflow:dispatch pc=268, inst=INPLACE_ADD(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$266binary_multiply.19']
DEBUG:numba.core.byteflow:dispatch pc=270, inst=ROT_THREE(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$268inplace_add.20']
DEBUG:numba.core.byteflow:dispatch pc=272, inst=STORE_SUBSCR(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$268inplace_add.20', '$y238.4', '$244build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=274, inst=JUMP_ABSOLUTE(arg=118, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=234, stack=('$phi236.0', '$phi236.1', '$phi236.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=108 nstack_initial=1), State(pc_initial=392 nstack_initial=3), State(pc_initial=186 nstack_initial=2), State(pc_initial=234 nstack_initial=3)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=392 nstack_initial=3), State(pc_initial=186 nstack_initial=2), State(pc_initial=234 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi392.0', '$phi392.1', '$phi392.2']
DEBUG:numba.core.byteflow:dispatch pc=392, inst=FOR_ITER(arg=22, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi392.0', '$phi392.1', '$phi392.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=438, stack=('$phi392.0', '$phi392.1'), blockstack=(), npush=0), Edge(pc=394, stack=('$phi392.0', '$phi392.1', '$phi392.2', '$392for_iter.4'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=186 nstack_initial=2), State(pc_initial=234 nstack_initial=3), State(pc_initial=438 nstack_initial=2), State(pc_initial=394 nstack_initial=4)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=234 nstack_initial=3), State(pc_initial=438 nstack_initial=2), State(pc_initial=394 nstack_initial=4)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=438 nstack_initial=2), State(pc_initial=394 nstack_initial=4)])
DEBUG:numba.core.byteflow:stack: ['$phi438.0', '$phi438.1']
DEBUG:numba.core.byteflow:dispatch pc=438, inst=JUMP_ABSOLUTE(arg=173, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi438.0', '$phi438.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=344, stack=('$phi438.0', '$phi438.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=394 nstack_initial=4), State(pc_initial=344 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi394.0', '$phi394.1', '$phi394.2', '$phi394.3']
DEBUG:numba.core.byteflow:dispatch pc=394, inst=STORE_FAST(arg=23, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$phi394.3']
DEBUG:numba.core.byteflow:dispatch pc=396, inst=LOAD_FAST(arg=1, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2']
DEBUG:numba.core.byteflow:dispatch pc=398, inst=LOAD_FAST(arg=20, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4']
DEBUG:numba.core.byteflow:dispatch pc=400, inst=LOAD_FAST(arg=23, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$t398.5']
DEBUG:numba.core.byteflow:dispatch pc=402, inst=BUILD_TUPLE(arg=2, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$t398.5', '$j400.6']
DEBUG:numba.core.byteflow:dispatch pc=404, inst=DUP_TOP_TWO(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=406, inst=BINARY_SUBSCR(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$404dup_top_two.8', '$404dup_top_two.9']
DEBUG:numba.core.byteflow:dispatch pc=408, inst=LOAD_FAST(arg=15, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=410, inst=LOAD_FAST(arg=0, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11']
DEBUG:numba.core.byteflow:dispatch pc=412, inst=LOAD_FAST(arg=10, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12']
DEBUG:numba.core.byteflow:dispatch pc=414, inst=LOAD_FAST(arg=25, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$n412.13']
DEBUG:numba.core.byteflow:dispatch pc=416, inst=BINARY_ADD(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$n412.13', '$k414.14']
DEBUG:numba.core.byteflow:dispatch pc=418, inst=LOAD_CONST(arg=4, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$416binary_add.15']
DEBUG:numba.core.byteflow:dispatch pc=420, inst=BINARY_ADD(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$416binary_add.15', '$const418.16']
DEBUG:numba.core.byteflow:dispatch pc=422, inst=LOAD_FAST(arg=23, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$420binary_add.17']
DEBUG:numba.core.byteflow:dispatch pc=424, inst=BUILD_TUPLE(arg=2, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$420binary_add.17', '$j422.18']
DEBUG:numba.core.byteflow:dispatch pc=426, inst=BINARY_SUBSCR(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$424build_tuple.19']
DEBUG:numba.core.byteflow:dispatch pc=428, inst=BINARY_MULTIPLY(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$426binary_subscr.20']
DEBUG:numba.core.byteflow:dispatch pc=430, inst=INPLACE_ADD(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$428binary_multiply.21']
DEBUG:numba.core.byteflow:dispatch pc=432, inst=ROT_THREE(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$430inplace_add.22']
DEBUG:numba.core.byteflow:dispatch pc=434, inst=STORE_SUBSCR(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$430inplace_add.22', '$y396.4', '$402build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=436, inst=JUMP_ABSOLUTE(arg=197, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=392, stack=('$phi394.0', '$phi394.1', '$phi394.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=344 nstack_initial=2), State(pc_initial=392 nstack_initial=3)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=392 nstack_initial=3)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=108 nstack_initial=1): {'$phi108.0'},
             State(pc_initial=110 nstack_initial=2): {'$phi110.1'},
             State(pc_initial=186 nstack_initial=2): {'$phi186.1'},
             State(pc_initial=188 nstack_initial=3): {'$phi188.2'},
             State(pc_initial=234 nstack_initial=3): {'$phi234.2'},
             State(pc_initial=236 nstack_initial=4): {'$phi236.3'},
             State(pc_initial=276 nstack_initial=2): set(),
             State(pc_initial=278 nstack_initial=1): set(),
             State(pc_initial=344 nstack_initial=2): {'$phi344.1'},
             State(pc_initial=346 nstack_initial=3): {'$phi346.2'},
             State(pc_initial=392 nstack_initial=3): {'$phi392.2'},
             State(pc_initial=394 nstack_initial=4): {'$phi394.3'},
             State(pc_initial=438 nstack_initial=2): set(),
             State(pc_initial=440 nstack_initial=1): set(),
             State(pc_initial=450 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi108.0': State(pc_initial=0 nstack_initial=0),
 '$phi110.1': State(pc_initial=108 nstack_initial=1),
 '$phi186.1': State(pc_initial=110 nstack_initial=2),
 '$phi188.2': State(pc_initial=186 nstack_initial=2),
 '$phi234.2': State(pc_initial=188 nstack_initial=3),
 '$phi236.3': State(pc_initial=234 nstack_initial=3),
 '$phi344.1': State(pc_initial=278 nstack_initial=1),
 '$phi346.2': State(pc_initial=344 nstack_initial=2),
 '$phi392.2': State(pc_initial=346 nstack_initial=3),
 '$phi394.3': State(pc_initial=392 nstack_initial=3)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi440.0',
                            State(pc_initial=440 nstack_initial=1))},
             '$phi110.0': {('$phi108.0',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$phi110.0',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi276.0',
                            State(pc_initial=276 nstack_initial=2))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi276.1',
                            State(pc_initial=276 nstack_initial=2))},
             '$phi188.0': {('$phi186.0',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi188.1': {('$phi186.1',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$phi188.0',
                            State(pc_initial=188 nstack_initial=3)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=4))},
             '$phi234.1': {('$phi188.1',
                            State(pc_initial=188 nstack_initial=3)),
                           ('$phi236.1',
                            State(pc_initial=236 nstack_initial=4))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3)),
                           ('$phi236.2',
                            State(pc_initial=236 nstack_initial=4))},
             '$phi236.0': {('$phi234.0',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi236.1': {('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi236.2': {('$phi234.2',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$phi234.0',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.1': {('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi278.0': {('$phi186.0',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi344.0': {('$phi278.0',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi438.0',
                            State(pc_initial=438 nstack_initial=2))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi438.1',
                            State(pc_initial=438 nstack_initial=2))},
             '$phi346.0': {('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi346.1': {('$phi344.1',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$phi346.0',
                            State(pc_initial=346 nstack_initial=3)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=4))},
             '$phi392.1': {('$phi346.1',
                            State(pc_initial=346 nstack_initial=3)),
                           ('$phi394.1',
                            State(pc_initial=394 nstack_initial=4))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3)),
                           ('$phi394.2',
                            State(pc_initial=394 nstack_initial=4))},
             '$phi394.0': {('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi394.1': {('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi394.2': {('$phi392.2',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.1': {('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi440.0': {('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi110.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi188.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi234.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3)),
                           ('$phi234.2',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi236.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi236.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi276.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi344.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi346.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi392.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3)),
                           ('$phi392.2',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi394.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi394.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi438.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi440.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi110.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi188.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi234.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi236.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi236.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi276.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi344.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi392.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi394.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi438.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi440.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi110.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi188.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi234.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi236.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi236.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi276.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi392.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi394.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi438.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi440.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi110.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi188.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi234.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi236.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi236.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi276.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi392.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi394.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi438.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi440.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi108.0': {('$106get_iter.38', State(pc_initial=0 nstack_initial=0))},
 '$phi110.1': {('$108for_iter.2', State(pc_initial=108 nstack_initial=1))},
 '$phi186.1': {('$184get_iter.32', State(pc_initial=110 nstack_initial=2))},
 '$phi188.2': {('$186for_iter.3', State(pc_initial=186 nstack_initial=2))},
 '$phi234.2': {('$232get_iter.23', State(pc_initial=188 nstack_initial=3))},
 '$phi236.3': {('$234for_iter.4', State(pc_initial=234 nstack_initial=3))},
 '$phi344.1': {('$342get_iter.28', State(pc_initial=278 nstack_initial=1))},
 '$phi346.2': {('$344for_iter.3', State(pc_initial=344 nstack_initial=2))},
 '$phi392.2': {('$390get_iter.23', State(pc_initial=346 nstack_initial=3))},
 '$phi394.3': {('$392for_iter.4', State(pc_initial=392 nstack_initial=3))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi108.0': '$106get_iter.38'},
             State(pc_initial=108 nstack_initial=1): {'$phi110.1': '$108for_iter.2'},
             State(pc_initial=110 nstack_initial=2): {'$phi186.1': '$184get_iter.32'},
             State(pc_initial=186 nstack_initial=2): {'$phi188.2': '$186for_iter.3'},
             State(pc_initial=188 nstack_initial=3): {'$phi234.2': '$232get_iter.23'},
             State(pc_initial=234 nstack_initial=3): {'$phi236.3': '$234for_iter.4'},
             State(pc_initial=278 nstack_initial=1): {'$phi344.1': '$342get_iter.28'},
             State(pc_initial=344 nstack_initial=2): {'$phi346.2': '$344for_iter.3'},
             State(pc_initial=346 nstack_initial=3): {'$phi392.2': '$390get_iter.23'},
             State(pc_initial=392 nstack_initial=3): {'$phi394.3': '$392for_iter.4'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$sample_ratio6.2'}), (8, {'func': '$2load_global.0', 'args': ['$const4.1', '$sample_ratio6.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$sample_ratio14.5'}), (16, {'lhs': '$const12.4', 'rhs': '$sample_ratio14.5', 'res': '$16binary_true_divide.6'}), (18, {'value': '$16binary_true_divide.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$scale22.8'}), (24, {'res': '$num_table24.9'}), (26, {'lhs': '$scale22.8', 'rhs': '$num_table24.9', 'res': '$26binary_multiply.10'}), (28, {'func': '$20load_global.7', 'args': ['$26binary_multiply.10'], 'res': '$28call_function.11'}), (30, {'value': '$28call_function.11'}), (32, {'res': '$const32.12'}), (34, {'value': '$const32.12'}), (36, {'res': '$const36.13'}), (38, {'value': '$const36.13'}), (40, {'res': '$const40.14'}), (42, {'value': '$const40.14'}), (44, {'res': '$const44.15'}), (46, {'value': '$const44.15'}), (48, {'res': '$const48.16'}), (50, {'value': '$const48.16'}), (52, {'res': '$const52.17'}), (54, {'value': '$const52.17'}), (56, {'res': '$const56.18'}), (58, {'value': '$const56.18'}), (60, {'res': '$interp_win60.19'}), (62, {'item': '$interp_win60.19', 'res': '$62load_attr.20'}), (64, {'res': '$const64.21'}), (66, {'index': '$const64.21', 'target': '$62load_attr.20', 'res': '$66binary_subscr.22'}), (68, {'value': '$66binary_subscr.22'}), (70, {'res': '$x70.23'}), (72, {'item': '$x70.23', 'res': '$72load_attr.24'}), (74, {'res': '$const74.25'}), (76, {'index': '$const74.25', 'target': '$72load_attr.24', 'res': '$76binary_subscr.26'}), (78, {'value': '$76binary_subscr.26'}), (80, {'res': '$y80.27'}), (82, {'item': '$y80.27', 'res': '$82load_attr.28'}), (84, {'res': '$const84.29'}), (86, {'index': '$const84.29', 'target': '$82load_attr.28', 'res': '$86binary_subscr.30'}), (88, {'value': '$86binary_subscr.30'}), (90, {'res': '$y90.31'}), (92, {'item': '$y90.31', 'res': '$92load_attr.32'}), (94, {'res': '$const94.33'}), (96, {'index': '$const94.33', 'target': '$92load_attr.32', 'res': '$96binary_subscr.34'}), (98, {'value': '$96binary_subscr.34'}), (100, {'res': '$100load_global.35'}), (102, {'res': '$n_out102.36'}), (104, {'func': '$100load_global.35', 'args': ['$n_out102.36'], 'res': '$104call_function.37'}), (106, {'value': '$104call_function.37', 'res': '$106get_iter.38'})), outgoing_phis={'$phi108.0': '$106get_iter.38'}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ('$106get_iter.38',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=108 nstack_initial=1):
AdaptBlockInfo(insts=((108, {'iterator': '$phi108.0', 'pair': '$108for_iter.1', 'indval': '$108for_iter.2', 'pred': '$108for_iter.3'}),), outgoing_phis={'$phi110.1': '$108for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={450: (), 110: ('$phi108.0', '$108for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=110 nstack_initial=2):
AdaptBlockInfo(insts=((110, {'value': '$phi110.1'}), (112, {'res': '$112load_global.2'}), (114, {'res': '$time_register114.3'}), (116, {'func': '$112load_global.2', 'args': ['$time_register114.3'], 'res': '$116call_function.4'}), (118, {'value': '$116call_function.4'}), (120, {'res': '$scale120.5'}), (122, {'res': '$time_register122.6'}), (124, {'res': '$n124.7'}), (126, {'lhs': '$time_register122.6', 'rhs': '$n124.7', 'res': '$126binary_subtract.8'}), (128, {'lhs': '$scale120.5', 'rhs': '$126binary_subtract.8', 'res': '$128binary_multiply.9'}), (130, {'value': '$128binary_multiply.9'}), (132, {'res': '$frac132.10'}), (134, {'res': '$num_table134.11'}), (136, {'lhs': '$frac132.10', 'rhs': '$num_table134.11', 'res': '$136binary_multiply.12'}), (138, {'value': '$136binary_multiply.12'}), (140, {'res': '$140load_global.13'}), (142, {'res': '$index_frac142.14'}), (144, {'func': '$140load_global.13', 'args': ['$index_frac142.14'], 'res': '$144call_function.15'}), (146, {'value': '$144call_function.15'}), (148, {'res': '$index_frac148.16'}), (150, {'res': '$offset150.17'}), (152, {'lhs': '$index_frac148.16', 'rhs': '$offset150.17', 'res': '$152binary_subtract.18'}), (154, {'value': '$152binary_subtract.18'}), (156, {'res': '$156load_global.19'}), (158, {'res': '$n158.20'}), (160, {'res': '$const160.21'}), (162, {'lhs': '$n158.20', 'rhs': '$const160.21', 'res': '$162binary_add.22'}), (164, {'res': '$nwin164.23'}), (166, {'res': '$offset166.24'}), (168, {'lhs': '$nwin164.23', 'rhs': '$offset166.24', 'res': '$168binary_subtract.25'}), (170, {'res': '$index_step170.26'}), (172, {'lhs': '$168binary_subtract.25', 'rhs': '$index_step170.26', 'res': '$172binary_floor_divide.27'}), (174, {'func': '$156load_global.19', 'args': ['$162binary_add.22', '$172binary_floor_divide.27'], 'res': '$174call_function.28'}), (176, {'value': '$174call_function.28'}), (178, {'res': '$178load_global.29'}), (180, {'res': '$i_max180.30'}), (182, {'func': '$178load_global.29', 'args': ['$i_max180.30'], 'res': '$182call_function.31'}), (184, {'value': '$182call_function.31', 'res': '$184get_iter.32'})), outgoing_phis={'$phi186.1': '$184get_iter.32'}, blockstack=(), active_try_block=None, outgoing_edgepushed={186: ('$phi110.0', '$184get_iter.32')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=186 nstack_initial=2):
AdaptBlockInfo(insts=((186, {'iterator': '$phi186.1', 'pair': '$186for_iter.2', 'indval': '$186for_iter.3', 'pred': '$186for_iter.4'}),), outgoing_phis={'$phi188.2': '$186for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={278: ('$phi186.0',), 188: ('$phi186.0', '$phi186.1', '$186for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=188 nstack_initial=3):
AdaptBlockInfo(insts=((188, {'value': '$phi188.2'}), (190, {'res': '$interp_win190.3'}), (192, {'res': '$offset192.4'}), (194, {'res': '$i194.5'}), (196, {'res': '$index_step196.6'}), (198, {'lhs': '$i194.5', 'rhs': '$index_step196.6', 'res': '$198binary_multiply.7'}), (200, {'lhs': '$offset192.4', 'rhs': '$198binary_multiply.7', 'res': '$200binary_add.8'}), (202, {'index': '$200binary_add.8', 'target': '$interp_win190.3', 'res': '$202binary_subscr.9'}), (204, {'res': '$eta204.10'}), (206, {'res': '$interp_delta206.11'}), (208, {'res': '$offset208.12'}), (210, {'res': '$i210.13'}), (212, {'res': '$index_step212.14'}), (214, {'lhs': '$i210.13', 'rhs': '$index_step212.14', 'res': '$214binary_multiply.15'}), (216, {'lhs': '$offset208.12', 'rhs': '$214binary_multiply.15', 'res': '$216binary_add.16'}), (218, {'index': '$216binary_add.16', 'target': '$interp_delta206.11', 'res': '$218binary_subscr.17'}), (220, {'lhs': '$eta204.10', 'rhs': '$218binary_subscr.17', 'res': '$220binary_multiply.18'}), (222, {'lhs': '$202binary_subscr.9', 'rhs': '$220binary_multiply.18', 'res': '$222binary_add.19'}), (224, {'value': '$222binary_add.19'}), (226, {'res': '$226load_global.20'}), (228, {'res': '$n_channels228.21'}), (230, {'func': '$226load_global.20', 'args': ['$n_channels228.21'], 'res': '$230call_function.22'}), (232, {'value': '$230call_function.22', 'res': '$232get_iter.23'})), outgoing_phis={'$phi234.2': '$232get_iter.23'}, blockstack=(), active_try_block=None, outgoing_edgepushed={234: ('$phi188.0', '$phi188.1', '$232get_iter.23')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=234 nstack_initial=3):
AdaptBlockInfo(insts=((234, {'iterator': '$phi234.2', 'pair': '$234for_iter.3', 'indval': '$234for_iter.4', 'pred': '$234for_iter.5'}),), outgoing_phis={'$phi236.3': '$234for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={276: ('$phi234.0', '$phi234.1'), 236: ('$phi234.0', '$phi234.1', '$phi234.2', '$234for_iter.4')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=236 nstack_initial=4):
AdaptBlockInfo(insts=((236, {'value': '$phi236.3'}), (238, {'res': '$y238.4'}), (240, {'res': '$t240.5'}), (242, {'res': '$j242.6'}), (244, {'items': ['$t240.5', '$j242.6'], 'res': '$244build_tuple.7'}), (246, {'orig': ['$y238.4', '$244build_tuple.7'], 'duped': ['$246dup_top_two.8', '$246dup_top_two.9']}), (248, {'index': '$246dup_top_two.9', 'target': '$246dup_top_two.8', 'res': '$248binary_subscr.10'}), (250, {'res': '$weight250.11'}), (252, {'res': '$x252.12'}), (254, {'res': '$n254.13'}), (256, {'res': '$i256.14'}), (258, {'lhs': '$n254.13', 'rhs': '$i256.14', 'res': '$258binary_subtract.15'}), (260, {'res': '$j260.16'}), (262, {'items': ['$258binary_subtract.15', '$j260.16'], 'res': '$262build_tuple.17'}), (264, {'index': '$262build_tuple.17', 'target': '$x252.12', 'res': '$264binary_subscr.18'}), (266, {'lhs': '$weight250.11', 'rhs': '$264binary_subscr.18', 'res': '$266binary_multiply.19'}), (268, {'lhs': '$248binary_subscr.10', 'rhs': '$266binary_multiply.19', 'res': '$268inplace_add.20'}), (272, {'target': '$y238.4', 'index': '$244build_tuple.7', 'value': '$268inplace_add.20'}), (274, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={234: ('$phi236.0', '$phi236.1', '$phi236.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=276 nstack_initial=2):
AdaptBlockInfo(insts=((276, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={186: ('$phi276.0', '$phi276.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=278 nstack_initial=1):
AdaptBlockInfo(insts=((278, {'res': '$scale278.1'}), (280, {'res': '$frac280.2'}), (282, {'lhs': '$scale278.1', 'rhs': '$frac280.2', 'res': '$282binary_subtract.3'}), (284, {'value': '$282binary_subtract.3'}), (286, {'res': '$frac286.4'}), (288, {'res': '$num_table288.5'}), (290, {'lhs': '$frac286.4', 'rhs': '$num_table288.5', 'res': '$290binary_multiply.6'}), (292, {'value': '$290binary_multiply.6'}), (294, {'res': '$294load_global.7'}), (296, {'res': '$index_frac296.8'}), (298, {'func': '$294load_global.7', 'args': ['$index_frac296.8'], 'res': '$298call_function.9'}), (300, {'value': '$298call_function.9'}), (302, {'res': '$index_frac302.10'}), (304, {'res': '$offset304.11'}), (306, {'lhs': '$index_frac302.10', 'rhs': '$offset304.11', 'res': '$306binary_subtract.12'}), (308, {'value': '$306binary_subtract.12'}), (310, {'res': '$310load_global.13'}), (312, {'res': '$n_orig312.14'}), (314, {'res': '$n314.15'}), (316, {'lhs': '$n_orig312.14', 'rhs': '$n314.15', 'res': '$316binary_subtract.16'}), (318, {'res': '$const318.17'}), (320, {'lhs': '$316binary_subtract.16', 'rhs': '$const318.17', 'res': '$320binary_subtract.18'}), (322, {'res': '$nwin322.19'}), (324, {'res': '$offset324.20'}), (326, {'lhs': '$nwin322.19', 'rhs': '$offset324.20', 'res': '$326binary_subtract.21'}), (328, {'res': '$index_step328.22'}), (330, {'lhs': '$326binary_subtract.21', 'rhs': '$index_step328.22', 'res': '$330binary_floor_divide.23'}), (332, {'func': '$310load_global.13', 'args': ['$320binary_subtract.18', '$330binary_floor_divide.23'], 'res': '$332call_function.24'}), (334, {'value': '$332call_function.24'}), (336, {'res': '$336load_global.25'}), (338, {'res': '$k_max338.26'}), (340, {'func': '$336load_global.25', 'args': ['$k_max338.26'], 'res': '$340call_function.27'}), (342, {'value': '$340call_function.27', 'res': '$342get_iter.28'})), outgoing_phis={'$phi344.1': '$342get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: ('$phi278.0', '$342get_iter.28')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=344 nstack_initial=2):
AdaptBlockInfo(insts=((344, {'iterator': '$phi344.1', 'pair': '$344for_iter.2', 'indval': '$344for_iter.3', 'pred': '$344for_iter.4'}),), outgoing_phis={'$phi346.2': '$344for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={440: ('$phi344.0',), 346: ('$phi344.0', '$phi344.1', '$344for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=346 nstack_initial=3):
AdaptBlockInfo(insts=((346, {'value': '$phi346.2'}), (348, {'res': '$interp_win348.3'}), (350, {'res': '$offset350.4'}), (352, {'res': '$k352.5'}), (354, {'res': '$index_step354.6'}), (356, {'lhs': '$k352.5', 'rhs': '$index_step354.6', 'res': '$356binary_multiply.7'}), (358, {'lhs': '$offset350.4', 'rhs': '$356binary_multiply.7', 'res': '$358binary_add.8'}), (360, {'index': '$358binary_add.8', 'target': '$interp_win348.3', 'res': '$360binary_subscr.9'}), (362, {'res': '$eta362.10'}), (364, {'res': '$interp_delta364.11'}), (366, {'res': '$offset366.12'}), (368, {'res': '$k368.13'}), (370, {'res': '$index_step370.14'}), (372, {'lhs': '$k368.13', 'rhs': '$index_step370.14', 'res': '$372binary_multiply.15'}), (374, {'lhs': '$offset366.12', 'rhs': '$372binary_multiply.15', 'res': '$374binary_add.16'}), (376, {'index': '$374binary_add.16', 'target': '$interp_delta364.11', 'res': '$376binary_subscr.17'}), (378, {'lhs': '$eta362.10', 'rhs': '$376binary_subscr.17', 'res': '$378binary_multiply.18'}), (380, {'lhs': '$360binary_subscr.9', 'rhs': '$378binary_multiply.18', 'res': '$380binary_add.19'}), (382, {'value': '$380binary_add.19'}), (384, {'res': '$384load_global.20'}), (386, {'res': '$n_channels386.21'}), (388, {'func': '$384load_global.20', 'args': ['$n_channels386.21'], 'res': '$388call_function.22'}), (390, {'value': '$388call_function.22', 'res': '$390get_iter.23'})), outgoing_phis={'$phi392.2': '$390get_iter.23'}, blockstack=(), active_try_block=None, outgoing_edgepushed={392: ('$phi346.0', '$phi346.1', '$390get_iter.23')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=392 nstack_initial=3):
AdaptBlockInfo(insts=((392, {'iterator': '$phi392.2', 'pair': '$392for_iter.3', 'indval': '$392for_iter.4', 'pred': '$392for_iter.5'}),), outgoing_phis={'$phi394.3': '$392for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={438: ('$phi392.0', '$phi392.1'), 394: ('$phi392.0', '$phi392.1', '$phi392.2', '$392for_iter.4')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=394 nstack_initial=4):
AdaptBlockInfo(insts=((394, {'value': '$phi394.3'}), (396, {'res': '$y396.4'}), (398, {'res': '$t398.5'}), (400, {'res': '$j400.6'}), (402, {'items': ['$t398.5', '$j400.6'], 'res': '$402build_tuple.7'}), (404, {'orig': ['$y396.4', '$402build_tuple.7'], 'duped': ['$404dup_top_two.8', '$404dup_top_two.9']}), (406, {'index': '$404dup_top_two.9', 'target': '$404dup_top_two.8', 'res': '$406binary_subscr.10'}), (408, {'res': '$weight408.11'}), (410, {'res': '$x410.12'}), (412, {'res': '$n412.13'}), (414, {'res': '$k414.14'}), (416, {'lhs': '$n412.13', 'rhs': '$k414.14', 'res': '$416binary_add.15'}), (418, {'res': '$const418.16'}), (420, {'lhs': '$416binary_add.15', 'rhs': '$const418.16', 'res': '$420binary_add.17'}), (422, {'res': '$j422.18'}), (424, {'items': ['$420binary_add.17', '$j422.18'], 'res': '$424build_tuple.19'}), (426, {'index': '$424build_tuple.19', 'target': '$x410.12', 'res': '$426binary_subscr.20'}), (428, {'lhs': '$weight408.11', 'rhs': '$426binary_subscr.20', 'res': '$428binary_multiply.21'}), (430, {'lhs': '$406binary_subscr.10', 'rhs': '$428binary_multiply.21', 'res': '$430inplace_add.22'}), (434, {'target': '$y396.4', 'index': '$402build_tuple.7', 'value': '$430inplace_add.22'}), (436, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={392: ('$phi394.0', '$phi394.1', '$phi394.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=438 nstack_initial=2):
AdaptBlockInfo(insts=((438, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: ('$phi438.0', '$phi438.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=440 nstack_initial=1):
AdaptBlockInfo(insts=((440, {'res': '$time_register440.1'}), (442, {'res': '$time_increment442.2'}), (444, {'lhs': '$time_register440.1', 'rhs': '$time_increment442.2', 'res': '$444inplace_add.3'}), (446, {'value': '$444inplace_add.3'}), (448, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ('$phi440.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=450 nstack_initial=0):
AdaptBlockInfo(insts=((450, {'res': '$const450.0'}), (452, {'retval': '$const450.0', 'castval': '$452return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    sample_ratio = arg(2, name=sample_ratio) ['sample_ratio']
    interp_win = arg(3, name=interp_win)     ['interp_win']
    interp_delta = arg(4, name=interp_delta) ['interp_delta']
    num_table = arg(5, name=num_table)       ['num_table']
    $2load_global.0 = global(min: <built-in function min>) ['$2load_global.0']
    $const4.1 = const(float, 1.0)            ['$const4.1']
    scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None) ['$2load_global.0', '$const4.1', 'sample_ratio', 'scale']
    $const12.4 = const(float, 1.0)           ['$const12.4']
    time_increment = $const12.4 / sample_ratio ['$const12.4', 'sample_ratio', 'time_increment']
    $20load_global.7 = global(int: <class 'int'>) ['$20load_global.7']
    $26binary_multiply.10 = scale * num_table ['$26binary_multiply.10', 'num_table', 'scale']
    index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None) ['$20load_global.7', '$26binary_multiply.10', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $62load_attr.20 = getattr(value=interp_win, attr=shape) ['$62load_attr.20', 'interp_win']
    $const64.21 = const(int, 0)              ['$const64.21']
    nwin = getitem(value=$62load_attr.20, index=$const64.21, fn=<built-in function getitem>) ['$62load_attr.20', '$const64.21', 'nwin']
    $72load_attr.24 = getattr(value=x, attr=shape) ['$72load_attr.24', 'x']
    $const74.25 = const(int, 0)              ['$const74.25']
    n_orig = getitem(value=$72load_attr.24, index=$const74.25, fn=<built-in function getitem>) ['$72load_attr.24', '$const74.25', 'n_orig']
    $82load_attr.28 = getattr(value=y, attr=shape) ['$82load_attr.28', 'y']
    $const84.29 = const(int, 0)              ['$const84.29']
    n_out = getitem(value=$82load_attr.28, index=$const84.29, fn=<built-in function getitem>) ['$82load_attr.28', '$const84.29', 'n_out']
    $92load_attr.32 = getattr(value=y, attr=shape) ['$92load_attr.32', 'y']
    $const94.33 = const(int, 1)              ['$const94.33']
    n_channels = getitem(value=$92load_attr.32, index=$const94.33, fn=<built-in function getitem>) ['$92load_attr.32', '$const94.33', 'n_channels']
    $100load_global.35 = global(range: <class 'range'>) ['$100load_global.35']
    $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None) ['$100load_global.35', '$104call_function.37', 'n_out']
    $106get_iter.38 = getiter(value=$104call_function.37) ['$104call_function.37', '$106get_iter.38']
    $phi108.0 = $106get_iter.38              ['$106get_iter.38', '$phi108.0']
    jump 108                                 []
label 108:
    $108for_iter.1 = iternext(value=$phi108.0) ['$108for_iter.1', '$phi108.0']
    $108for_iter.2 = pair_first(value=$108for_iter.1) ['$108for_iter.1', '$108for_iter.2']
    $108for_iter.3 = pair_second(value=$108for_iter.1) ['$108for_iter.1', '$108for_iter.3']
    $phi110.1 = $108for_iter.2               ['$108for_iter.2', '$phi110.1']
    branch $108for_iter.3, 110, 450          ['$108for_iter.3']
label 110:
    t = $phi110.1                            ['$phi110.1', 't']
    $112load_global.2 = global(int: <class 'int'>) ['$112load_global.2']
    n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None) ['$112load_global.2', 'n', 'time_register']
    $126binary_subtract.8 = time_register - n ['$126binary_subtract.8', 'n', 'time_register']
    frac = scale * $126binary_subtract.8     ['$126binary_subtract.8', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $140load_global.13 = global(int: <class 'int'>) ['$140load_global.13']
    offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None) ['$140load_global.13', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $156load_global.19 = global(min: <built-in function min>) ['$156load_global.19']
    $const160.21 = const(int, 1)             ['$const160.21']
    $162binary_add.22 = n + $const160.21     ['$162binary_add.22', '$const160.21', 'n']
    $168binary_subtract.25 = nwin - offset   ['$168binary_subtract.25', 'nwin', 'offset']
    $172binary_floor_divide.27 = $168binary_subtract.25 // index_step ['$168binary_subtract.25', '$172binary_floor_divide.27', 'index_step']
    i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None) ['$156load_global.19', '$162binary_add.22', '$172binary_floor_divide.27', 'i_max']
    $178load_global.29 = global(range: <class 'range'>) ['$178load_global.29']
    $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None) ['$178load_global.29', '$182call_function.31', 'i_max']
    $184get_iter.32 = getiter(value=$182call_function.31) ['$182call_function.31', '$184get_iter.32']
    $phi186.1 = $184get_iter.32              ['$184get_iter.32', '$phi186.1']
    jump 186                                 []
label 186:
    $186for_iter.2 = iternext(value=$phi186.1) ['$186for_iter.2', '$phi186.1']
    $186for_iter.3 = pair_first(value=$186for_iter.2) ['$186for_iter.2', '$186for_iter.3']
    $186for_iter.4 = pair_second(value=$186for_iter.2) ['$186for_iter.2', '$186for_iter.4']
    $phi188.2 = $186for_iter.3               ['$186for_iter.3', '$phi188.2']
    branch $186for_iter.4, 188, 278          ['$186for_iter.4']
label 188:
    i = $phi188.2                            ['$phi188.2', 'i']
    $198binary_multiply.7 = i * index_step   ['$198binary_multiply.7', 'i', 'index_step']
    $200binary_add.8 = offset + $198binary_multiply.7 ['$198binary_multiply.7', '$200binary_add.8', 'offset']
    $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>) ['$200binary_add.8', '$202binary_subscr.9', 'interp_win']
    $214binary_multiply.15 = i * index_step  ['$214binary_multiply.15', 'i', 'index_step']
    $216binary_add.16 = offset + $214binary_multiply.15 ['$214binary_multiply.15', '$216binary_add.16', 'offset']
    $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>) ['$216binary_add.16', '$218binary_subscr.17', 'interp_delta']
    $220binary_multiply.18 = eta * $218binary_subscr.17 ['$218binary_subscr.17', '$220binary_multiply.18', 'eta']
    weight = $202binary_subscr.9 + $220binary_multiply.18 ['$202binary_subscr.9', '$220binary_multiply.18', 'weight']
    $226load_global.20 = global(range: <class 'range'>) ['$226load_global.20']
    $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None) ['$226load_global.20', '$230call_function.22', 'n_channels']
    $232get_iter.23 = getiter(value=$230call_function.22) ['$230call_function.22', '$232get_iter.23']
    $phi234.2 = $232get_iter.23              ['$232get_iter.23', '$phi234.2']
    jump 234                                 []
label 234:
    $234for_iter.3 = iternext(value=$phi234.2) ['$234for_iter.3', '$phi234.2']
    $234for_iter.4 = pair_first(value=$234for_iter.3) ['$234for_iter.3', '$234for_iter.4']
    $234for_iter.5 = pair_second(value=$234for_iter.3) ['$234for_iter.3', '$234for_iter.5']
    $phi236.3 = $234for_iter.4               ['$234for_iter.4', '$phi236.3']
    branch $234for_iter.5, 236, 276          ['$234for_iter.5']
label 236:
    j = $phi236.3                            ['$phi236.3', 'j']
    $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)]) ['$244build_tuple.7', 'j', 't']
    $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>) ['$244build_tuple.7', '$248binary_subscr.10', 'y']
    $258binary_subtract.15 = n - i           ['$258binary_subtract.15', 'i', 'n']
    $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)]) ['$258binary_subtract.15', '$262build_tuple.17', 'j']
    $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>) ['$262build_tuple.17', '$264binary_subscr.18', 'x']
    $266binary_multiply.19 = weight * $264binary_subscr.18 ['$264binary_subscr.18', '$266binary_multiply.19', 'weight']
    $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined) ['$248binary_subscr.10', '$266binary_multiply.19', '$268inplace_add.20']
    y[$244build_tuple.7] = $268inplace_add.20 ['$244build_tuple.7', '$268inplace_add.20', 'y']
    jump 234                                 []
label 276:
    jump 186                                 []
label 278:
    $282binary_subtract.3 = scale - frac     ['$282binary_subtract.3', 'frac', 'scale']
    frac = $282binary_subtract.3             ['$282binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $294load_global.7 = global(int: <class 'int'>) ['$294load_global.7']
    offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None) ['$294load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $310load_global.13 = global(min: <built-in function min>) ['$310load_global.13']
    $316binary_subtract.16 = n_orig - n      ['$316binary_subtract.16', 'n', 'n_orig']
    $const318.17 = const(int, 1)             ['$const318.17']
    $320binary_subtract.18 = $316binary_subtract.16 - $const318.17 ['$316binary_subtract.16', '$320binary_subtract.18', '$const318.17']
    $326binary_subtract.21 = nwin - offset   ['$326binary_subtract.21', 'nwin', 'offset']
    $330binary_floor_divide.23 = $326binary_subtract.21 // index_step ['$326binary_subtract.21', '$330binary_floor_divide.23', 'index_step']
    k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None) ['$310load_global.13', '$320binary_subtract.18', '$330binary_floor_divide.23', 'k_max']
    $336load_global.25 = global(range: <class 'range'>) ['$336load_global.25']
    $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None) ['$336load_global.25', '$340call_function.27', 'k_max']
    $342get_iter.28 = getiter(value=$340call_function.27) ['$340call_function.27', '$342get_iter.28']
    $phi344.1 = $342get_iter.28              ['$342get_iter.28', '$phi344.1']
    jump 344                                 []
label 344:
    $344for_iter.2 = iternext(value=$phi344.1) ['$344for_iter.2', '$phi344.1']
    $344for_iter.3 = pair_first(value=$344for_iter.2) ['$344for_iter.2', '$344for_iter.3']
    $344for_iter.4 = pair_second(value=$344for_iter.2) ['$344for_iter.2', '$344for_iter.4']
    $phi346.2 = $344for_iter.3               ['$344for_iter.3', '$phi346.2']
    branch $344for_iter.4, 346, 440          ['$344for_iter.4']
label 346:
    k = $phi346.2                            ['$phi346.2', 'k']
    $356binary_multiply.7 = k * index_step   ['$356binary_multiply.7', 'index_step', 'k']
    $358binary_add.8 = offset + $356binary_multiply.7 ['$356binary_multiply.7', '$358binary_add.8', 'offset']
    $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>) ['$358binary_add.8', '$360binary_subscr.9', 'interp_win']
    $372binary_multiply.15 = k * index_step  ['$372binary_multiply.15', 'index_step', 'k']
    $374binary_add.16 = offset + $372binary_multiply.15 ['$372binary_multiply.15', '$374binary_add.16', 'offset']
    $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>) ['$374binary_add.16', '$376binary_subscr.17', 'interp_delta']
    $378binary_multiply.18 = eta * $376binary_subscr.17 ['$376binary_subscr.17', '$378binary_multiply.18', 'eta']
    weight = $360binary_subscr.9 + $378binary_multiply.18 ['$360binary_subscr.9', '$378binary_multiply.18', 'weight']
    $384load_global.20 = global(range: <class 'range'>) ['$384load_global.20']
    $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None) ['$384load_global.20', '$388call_function.22', 'n_channels']
    $390get_iter.23 = getiter(value=$388call_function.22) ['$388call_function.22', '$390get_iter.23']
    $phi392.2 = $390get_iter.23              ['$390get_iter.23', '$phi392.2']
    jump 392                                 []
label 392:
    $392for_iter.3 = iternext(value=$phi392.2) ['$392for_iter.3', '$phi392.2']
    $392for_iter.4 = pair_first(value=$392for_iter.3) ['$392for_iter.3', '$392for_iter.4']
    $392for_iter.5 = pair_second(value=$392for_iter.3) ['$392for_iter.3', '$392for_iter.5']
    $phi394.3 = $392for_iter.4               ['$392for_iter.4', '$phi394.3']
    branch $392for_iter.5, 394, 438          ['$392for_iter.5']
label 394:
    j = $phi394.3                            ['$phi394.3', 'j']
    $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)]) ['$402build_tuple.7', 'j', 't']
    $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>) ['$402build_tuple.7', '$406binary_subscr.10', 'y']
    $416binary_add.15 = n + k                ['$416binary_add.15', 'k', 'n']
    $const418.16 = const(int, 1)             ['$const418.16']
    $420binary_add.17 = $416binary_add.15 + $const418.16 ['$416binary_add.15', '$420binary_add.17', '$const418.16']
    $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)]) ['$420binary_add.17', '$424build_tuple.19', 'j']
    $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>) ['$424build_tuple.19', '$426binary_subscr.20', 'x']
    $428binary_multiply.21 = weight * $426binary_subscr.20 ['$426binary_subscr.20', '$428binary_multiply.21', 'weight']
    $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined) ['$406binary_subscr.10', '$428binary_multiply.21', '$430inplace_add.22']
    y[$402build_tuple.7] = $430inplace_add.22 ['$402build_tuple.7', '$430inplace_add.22', 'y']
    jump 392                                 []
label 438:
    jump 344                                 []
label 440:
    $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined) ['$444inplace_add.3', 'time_increment', 'time_register']
    time_register = $444inplace_add.3        ['$444inplace_add.3', 'time_register']
    jump 108                                 []
label 450:
    $const450.0 = const(NoneType, None)      ['$const450.0']
    $452return_value.1 = cast(value=$const450.0) ['$452return_value.1', '$const450.0']
    return $452return_value.1                ['$452return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block analysis pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block analysis pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block analysis pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block analysis pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block analysis pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block analysis pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block analysis pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block analysis pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block analysis pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block analysis pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block analysis pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block analysis pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block analysis pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block analysis pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block analysis pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$100load_global.35': [<numba.core.ir.Assign object at 0x000001F59FF5CEB0>],
             '$104call_function.37': [<numba.core.ir.Assign object at 0x000001F59FF5D1B0>],
             '$106get_iter.38': [<numba.core.ir.Assign object at 0x000001F59FF5D2D0>],
             '$108for_iter.1': [<numba.core.ir.Assign object at 0x000001F59FEF6560>],
             '$108for_iter.2': [<numba.core.ir.Assign object at 0x000001F59FEF6D40>],
             '$108for_iter.3': [<numba.core.ir.Assign object at 0x000001F59FEF73A0>],
             '$112load_global.2': [<numba.core.ir.Assign object at 0x000001F59FF5D450>],
             '$126binary_subtract.8': [<numba.core.ir.Assign object at 0x000001F59FF5DCC0>],
             '$140load_global.13': [<numba.core.ir.Assign object at 0x000001F59FF5E4D0>],
             '$156load_global.19': [<numba.core.ir.Assign object at 0x000001F59FF5EE30>],
             '$162binary_add.22': [<numba.core.ir.Assign object at 0x000001F59FF5F280>],
             '$168binary_subtract.25': [<numba.core.ir.Assign object at 0x000001F59FF5F640>],
             '$172binary_floor_divide.27': [<numba.core.ir.Assign object at 0x000001F59FF5F8E0>],
             '$178load_global.29': [<numba.core.ir.Assign object at 0x000001F59FF5FCD0>],
             '$182call_function.31': [<numba.core.ir.Assign object at 0x000001F59FF5FFD0>],
             '$184get_iter.32': [<numba.core.ir.Assign object at 0x000001F59FF64130>],
             '$186for_iter.2': [<numba.core.ir.Assign object at 0x000001F59FF5E080>],
             '$186for_iter.3': [<numba.core.ir.Assign object at 0x000001F59FF5E320>],
             '$186for_iter.4': [<numba.core.ir.Assign object at 0x000001F59FF5E710>],
             '$198binary_multiply.7': [<numba.core.ir.Assign object at 0x000001F59FF646A0>],
             '$200binary_add.8': [<numba.core.ir.Assign object at 0x000001F59FF64820>],
             '$202binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F59FF649A0>],
             '$20load_global.7': [<numba.core.ir.Assign object at 0x000001F59FEF5930>],
             '$214binary_multiply.15': [<numba.core.ir.Assign object at 0x000001F59FF650C0>],
             '$216binary_add.16': [<numba.core.ir.Assign object at 0x000001F59FF65240>],
             '$218binary_subscr.17': [<numba.core.ir.Assign object at 0x000001F59FF653C0>],
             '$220binary_multiply.18': [<numba.core.ir.Assign object at 0x000001F59FF65540>],
             '$226load_global.20': [<numba.core.ir.Assign object at 0x000001F59FF658D0>],
             '$230call_function.22': [<numba.core.ir.Assign object at 0x000001F59FF65BD0>],
             '$232get_iter.23': [<numba.core.ir.Assign object at 0x000001F59FF65CF0>],
             '$234for_iter.3': [<numba.core.ir.Assign object at 0x000001F59FF64F10>],
             '$234for_iter.4': [<numba.core.ir.Assign object at 0x000001F59FF659F0>],
             '$234for_iter.5': [<numba.core.ir.Assign object at 0x000001F59FF65E40>],
             '$244build_tuple.7': [<numba.core.ir.Assign object at 0x000001F59FF66620>],
             '$248binary_subscr.10': [<numba.core.ir.Assign object at 0x000001F59FF66980>],
             '$258binary_subtract.15': [<numba.core.ir.Assign object at 0x000001F59FF66F80>],
             '$262build_tuple.17': [<numba.core.ir.Assign object at 0x000001F59FF67220>],
             '$264binary_subscr.18': [<numba.core.ir.Assign object at 0x000001F59FF673A0>],
             '$266binary_multiply.19': [<numba.core.ir.Assign object at 0x000001F59FF67520>],
             '$268inplace_add.20': [<numba.core.ir.Assign object at 0x000001F59FF676A0>],
             '$26binary_multiply.10': [<numba.core.ir.Assign object at 0x000001F59FEF5D20>],
             '$282binary_subtract.3': [<numba.core.ir.Assign object at 0x000001F59FF67A60>],
             '$294load_global.7': [<numba.core.ir.Assign object at 0x000001F59FF70130>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001F59FEF4D30>],
             '$310load_global.13': [<numba.core.ir.Assign object at 0x000001F59FF70A90>],
             '$316binary_subtract.16': [<numba.core.ir.Assign object at 0x000001F59FF70E80>],
             '$320binary_subtract.18': [<numba.core.ir.Assign object at 0x000001F59FF71180>],
             '$326binary_subtract.21': [<numba.core.ir.Assign object at 0x000001F59FF71540>],
             '$330binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000001F59FF717E0>],
             '$336load_global.25': [<numba.core.ir.Assign object at 0x000001F59FF71BD0>],
             '$340call_function.27': [<numba.core.ir.Assign object at 0x000001F59FF71ED0>],
             '$342get_iter.28': [<numba.core.ir.Assign object at 0x000001F59FF71FF0>],
             '$344for_iter.2': [<numba.core.ir.Assign object at 0x000001F59FF70340>],
             '$344for_iter.3': [<numba.core.ir.Assign object at 0x000001F59FF70940>],
             '$344for_iter.4': [<numba.core.ir.Assign object at 0x000001F59FF70CD0>],
             '$356binary_multiply.7': [<numba.core.ir.Assign object at 0x000001F59FF72740>],
             '$358binary_add.8': [<numba.core.ir.Assign object at 0x000001F59FF728C0>],
             '$360binary_subscr.9': [<numba.core.ir.Assign object at 0x000001F59FF72A40>],
             '$372binary_multiply.15': [<numba.core.ir.Assign object at 0x000001F59FF73160>],
             '$374binary_add.16': [<numba.core.ir.Assign object at 0x000001F59FF732E0>],
             '$376binary_subscr.17': [<numba.core.ir.Assign object at 0x000001F59FF73460>],
             '$378binary_multiply.18': [<numba.core.ir.Assign object at 0x000001F59FF735E0>],
             '$384load_global.20': [<numba.core.ir.Assign object at 0x000001F59FF73970>],
             '$388call_function.22': [<numba.core.ir.Assign object at 0x000001F59FF73C70>],
             '$390get_iter.23': [<numba.core.ir.Assign object at 0x000001F59FF73D90>],
             '$392for_iter.3': [<numba.core.ir.Assign object at 0x000001F59FF72FB0>],
             '$392for_iter.4': [<numba.core.ir.Assign object at 0x000001F59FF73A90>],
             '$392for_iter.5': [<numba.core.ir.Assign object at 0x000001F59FF73EE0>],
             '$402build_tuple.7': [<numba.core.ir.Assign object at 0x000001F59FF7C6A0>],
             '$406binary_subscr.10': [<numba.core.ir.Assign object at 0x000001F59FF7CA00>],
             '$416binary_add.15': [<numba.core.ir.Assign object at 0x000001F59FF7D000>],
             '$420binary_add.17': [<numba.core.ir.Assign object at 0x000001F59FF7D300>],
             '$424build_tuple.19': [<numba.core.ir.Assign object at 0x000001F59FF7D5A0>],
             '$426binary_subscr.20': [<numba.core.ir.Assign object at 0x000001F59FF7D720>],
             '$428binary_multiply.21': [<numba.core.ir.Assign object at 0x000001F59FF7D8A0>],
             '$430inplace_add.22': [<numba.core.ir.Assign object at 0x000001F59FF7DA20>],
             '$444inplace_add.3': [<numba.core.ir.Assign object at 0x000001F59FF7DDE0>],
             '$452return_value.1': [<numba.core.ir.Assign object at 0x000001F59FF7E230>],
             '$62load_attr.20': [<numba.core.ir.Assign object at 0x000001F59FEF7490>],
             '$72load_attr.24': [<numba.core.ir.Assign object at 0x000001F59FEF7B50>],
             '$82load_attr.28': [<numba.core.ir.Assign object at 0x000001F59FF5C250>],
             '$92load_attr.32': [<numba.core.ir.Assign object at 0x000001F59FF5C910>],
             '$const12.4': [<numba.core.ir.Assign object at 0x000001F59FEF53F0>],
             '$const160.21': [<numba.core.ir.Assign object at 0x000001F59FF5F0D0>],
             '$const318.17': [<numba.core.ir.Assign object at 0x000001F59FF70FD0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001F59FEF4EB0>],
             '$const418.16': [<numba.core.ir.Assign object at 0x000001F59FF7D150>],
             '$const450.0': [<numba.core.ir.Assign object at 0x000001F59FF7E0B0>],
             '$const64.21': [<numba.core.ir.Assign object at 0x000001F59FEF7610>],
             '$const74.25': [<numba.core.ir.Assign object at 0x000001F59FEF7CD0>],
             '$const84.29': [<numba.core.ir.Assign object at 0x000001F59FF5C3D0>],
             '$const94.33': [<numba.core.ir.Assign object at 0x000001F59FF5CA90>],
             '$phi108.0': [<numba.core.ir.Assign object at 0x000001F59FEF5060>],
             '$phi110.1': [<numba.core.ir.Assign object at 0x000001F59FEF6020>],
             '$phi186.1': [<numba.core.ir.Assign object at 0x000001F59FF5D600>],
             '$phi188.2': [<numba.core.ir.Assign object at 0x000001F59FF5DF60>],
             '$phi234.2': [<numba.core.ir.Assign object at 0x000001F59FF5DB10>],
             '$phi236.3': [<numba.core.ir.Assign object at 0x000001F59FF64CD0>],
             '$phi344.1': [<numba.core.ir.Assign object at 0x000001F59FF67100>],
             '$phi346.2': [<numba.core.ir.Assign object at 0x000001F59FF70250>],
             '$phi392.2': [<numba.core.ir.Assign object at 0x000001F59FF72230>],
             '$phi394.3': [<numba.core.ir.Assign object at 0x000001F59FF72D70>],
             'eta': [<numba.core.ir.Assign object at 0x000001F59FEF6E30>,
                     <numba.core.ir.Assign object at 0x000001F59FF5EC20>,
                     <numba.core.ir.Assign object at 0x000001F59FF70880>],
             'frac': [<numba.core.ir.Assign object at 0x000001F59FEF6650>,
                      <numba.core.ir.Assign object at 0x000001F59FF5DE40>,
                      <numba.core.ir.Assign object at 0x000001F59FF67B20>],
             'i': [<numba.core.ir.Assign object at 0x000001F59FF5F730>],
             'i_max': [<numba.core.ir.Assign object at 0x000001F59FF5FA90>],
             'index_frac': [<numba.core.ir.Assign object at 0x000001F59FEF68F0>,
                            <numba.core.ir.Assign object at 0x000001F59FF5E2C0>,
                            <numba.core.ir.Assign object at 0x000001F59FF67EE0>],
             'index_step': [<numba.core.ir.Assign object at 0x000001F59FEF5ED0>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001F59FEF4850>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001F59FEF4C40>],
             'j': [<numba.core.ir.Assign object at 0x000001F59FF66110>,
                   <numba.core.ir.Assign object at 0x000001F59FF7C1C0>],
             'k': [<numba.core.ir.Assign object at 0x000001F59FF72110>],
             'k_max': [<numba.core.ir.Assign object at 0x000001F59FF71990>],
             'n': [<numba.core.ir.Assign object at 0x000001F59FEF63B0>,
                   <numba.core.ir.Assign object at 0x000001F59FF5D750>],
             'n_channels': [<numba.core.ir.Assign object at 0x000001F59FFB1C90>],
             'n_orig': [<numba.core.ir.Assign object at 0x000001F59FFB1B10>],
             'n_out': [<numba.core.ir.Assign object at 0x000001F59FFB1BD0>],
             'num_table': [<numba.core.ir.Assign object at 0x000001F59FEF4250>],
             'nwin': [<numba.core.ir.Assign object at 0x000001F59FFB1A80>],
             'offset': [<numba.core.ir.Assign object at 0x000001F59FEF6B90>,
                        <numba.core.ir.Assign object at 0x000001F59FF5E7D0>,
                        <numba.core.ir.Assign object at 0x000001F59FF70430>],
             'sample_ratio': [<numba.core.ir.Assign object at 0x000001F59FEF4670>],
             'scale': [<numba.core.ir.Assign object at 0x000001F59FEF51B0>],
             't': [<numba.core.ir.Assign object at 0x000001F59FF5CDC0>],
             'time_increment': [<numba.core.ir.Assign object at 0x000001F59FEF56C0>],
             'time_register': [<numba.core.ir.Assign object at 0x000001F59FEF6110>,
                               <numba.core.ir.Assign object at 0x000001F59FF7DEA0>],
             'weight': [<numba.core.ir.Assign object at 0x000001F59FEF70D0>,
                        <numba.core.ir.Assign object at 0x000001F59FF656C0>,
                        <numba.core.ir.Assign object at 0x000001F59FF73760>],
             'x': [<numba.core.ir.Assign object at 0x000001F59FEF40A0>],
             'y': [<numba.core.ir.Assign object at 0x000001F59FEF4C10>]})
DEBUG:numba.core.ssa:SSA violators {'offset', 'n', 'weight', 'index_frac', 'frac', 'eta', 'j', 'time_register'}
DEBUG:numba.core.ssa:Fix SSA violator on var offset
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:first assign: offset
DEBUG:numba.core.ssa:replaced with: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F59FF7EE90>],
             110: [<numba.core.ir.Assign object at 0x000001F59FF7EB60>],
             278: [<numba.core.ir.Assign object at 0x000001F59FF7FFA0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:find_def var='offset' stmt=eta = index_frac - offset
DEBUG:numba.core.ssa:replaced with: eta = index_frac - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:find_def var='offset' stmt=$168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:replaced with: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:find_def var='offset' stmt=$200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:find_def_from_top label 188
DEBUG:numba.core.ssa:idom 186 from label 188
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:find_def var='offset' stmt=$216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:find_def_from_top label 188
DEBUG:numba.core.ssa:idom 186 from label 188
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:find_def var='offset' stmt=eta = index_frac - offset
DEBUG:numba.core.ssa:replaced with: eta = index_frac - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:find_def var='offset' stmt=$326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:replaced with: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:find_def var='offset' stmt=$358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:find_def_from_top label 346
DEBUG:numba.core.ssa:idom 344 from label 346
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:replaced with: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:find_def var='offset' stmt=$374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:find_def_from_top label 346
DEBUG:numba.core.ssa:idom 344 from label 346
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:replaced with: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var n
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:first assign: n
DEBUG:numba.core.ssa:replaced with: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F59FF7F6A0>],
             110: [<numba.core.ir.Assign object at 0x000001F59FF7EFE0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:find_def var='n' stmt=$126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:replaced with: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:find_def var='n' stmt=$162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:replaced with: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:find_def var='n' stmt=$258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:find_def_from_top label 236
DEBUG:numba.core.ssa:idom 234 from label 236
DEBUG:numba.core.ssa:find_def_from_bottom label 234
DEBUG:numba.core.ssa:find_def_from_top label 234
DEBUG:numba.core.ssa:idom 188 from label 234
DEBUG:numba.core.ssa:find_def_from_bottom label 188
DEBUG:numba.core.ssa:find_def_from_top label 188
DEBUG:numba.core.ssa:idom 186 from label 188
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:find_def var='n' stmt=$316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:find_def_from_top label 278
DEBUG:numba.core.ssa:idom 186 from label 278
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:find_def var='n' stmt=$416binary_add.15 = n + k
DEBUG:numba.core.ssa:find_def_from_top label 394
DEBUG:numba.core.ssa:idom 392 from label 394
DEBUG:numba.core.ssa:find_def_from_bottom label 392
DEBUG:numba.core.ssa:find_def_from_top label 392
DEBUG:numba.core.ssa:idom 346 from label 392
DEBUG:numba.core.ssa:find_def_from_bottom label 346
DEBUG:numba.core.ssa:find_def_from_top label 346
DEBUG:numba.core.ssa:idom 344 from label 346
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:find_def_from_top label 278
DEBUG:numba.core.ssa:idom 186 from label 278
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7FE50>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var weight
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: weight
DEBUG:numba.core.ssa:replaced with: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:replaced with: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:replaced with: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F59FF7F580>],
             188: [<numba.core.ir.Assign object at 0x000001F59FF7FDC0>],
             346: [<numba.core.ir.Assign object at 0x000001F59FFB2830>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:find_def var='weight' stmt=$266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:find_def_from_top label 236
DEBUG:numba.core.ssa:idom 234 from label 236
DEBUG:numba.core.ssa:find_def_from_bottom label 234
DEBUG:numba.core.ssa:find_def_from_top label 234
DEBUG:numba.core.ssa:idom 188 from label 234
DEBUG:numba.core.ssa:find_def_from_bottom label 188
DEBUG:numba.core.ssa:replaced with: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:find_def var='weight' stmt=$428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:find_def_from_top label 394
DEBUG:numba.core.ssa:idom 392 from label 394
DEBUG:numba.core.ssa:find_def_from_bottom label 392
DEBUG:numba.core.ssa:find_def_from_top label 392
DEBUG:numba.core.ssa:idom 346 from label 392
DEBUG:numba.core.ssa:find_def_from_bottom label 346
DEBUG:numba.core.ssa:replaced with: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var index_frac
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: index_frac
DEBUG:numba.core.ssa:replaced with: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:replaced with: index_frac.1 = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:replaced with: index_frac.2 = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F59FF7EEC0>],
             110: [<numba.core.ir.Assign object at 0x000001F59FF7E770>],
             278: [<numba.core.ir.Assign object at 0x000001F59FFB3100>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='index_frac' stmt=offset.1 = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.1
DEBUG:numba.core.ssa:find_def var='index_frac' stmt=eta = index_frac - offset.1
DEBUG:numba.core.ssa:replaced with: eta = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='index_frac' stmt=offset.2 = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset.2
DEBUG:numba.core.ssa:find_def var='index_frac' stmt=eta = index_frac - offset.2
DEBUG:numba.core.ssa:replaced with: eta = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var frac
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: frac
DEBUG:numba.core.ssa:replaced with: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:replaced with: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:replaced with: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F59FF7FFA0>],
             110: [<numba.core.ir.Assign object at 0x000001F59FF7FAC0>],
             278: [<numba.core.ir.Assign object at 0x000001F59FFB2380>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac * num_table
DEBUG:numba.core.ssa:find_def var='frac' stmt=index_frac.1 = frac * num_table
DEBUG:numba.core.ssa:replaced with: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:find_def var='frac' stmt=$282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:find_def_from_top label 278
DEBUG:numba.core.ssa:idom 186 from label 278
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac * num_table
DEBUG:numba.core.ssa:find_def var='frac' stmt=index_frac.2 = frac * num_table
DEBUG:numba.core.ssa:replaced with: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var eta
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: eta
DEBUG:numba.core.ssa:replaced with: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac.1 - offset.1
DEBUG:numba.core.ssa:replaced with: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac.2 - offset.2
DEBUG:numba.core.ssa:replaced with: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F59FF7F2E0>],
             110: [<numba.core.ir.Assign object at 0x000001F59FF7FF40>],
             278: [<numba.core.ir.Assign object at 0x000001F59FFB1450>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:find_def var='eta' stmt=$220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:find_def_from_top label 188
DEBUG:numba.core.ssa:idom 186 from label 188
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:find_def var='eta' stmt=$378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:find_def_from_top label 346
DEBUG:numba.core.ssa:idom 344 from label 346
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:replaced with: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var j
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:first assign: j
DEBUG:numba.core.ssa:replaced with: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:replaced with: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {236: [<numba.core.ir.Assign object at 0x000001F59FF7E590>],
             394: [<numba.core.ir.Assign object at 0x000001F59FFB1DB0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:find_def var='j' stmt=$244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:find_def var='j' stmt=$262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:find_def var='j' stmt=$402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:replaced with: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:find_def var='j' stmt=$424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:replaced with: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var time_register
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: time_register
DEBUG:numba.core.ssa:replaced with: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:replaced with: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001F59FEDEE60>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001F59FF7E740>],
             440: [<numba.core.ir.Assign object at 0x000001F59FFB3A90>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='time_register' stmt=n.1 = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 110
DEBUG:numba.core.ssa:idom 108 from label 110
DEBUG:numba.core.ssa:find_def_from_bottom label 108
DEBUG:numba.core.ssa:find_def_from_top label 108
DEBUG:numba.core.ssa:insert phi node time_register.2 = phi(incoming_values=[], incoming_blocks=[]) at 108
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def time_register = const(float, 0.0)
DEBUG:numba.core.ssa:find_def_from_bottom label 440
DEBUG:numba.core.ssa:incoming_def time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:replaced with: n.1 = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:find_def var='time_register' stmt=$126binary_subtract.8 = time_register - n.1
DEBUG:numba.core.ssa:find_def_from_top label 110
DEBUG:numba.core.ssa:idom 108 from label 110
DEBUG:numba.core.ssa:find_def_from_bottom label 108
DEBUG:numba.core.ssa:replaced with: $126binary_subtract.8 = time_register.2 - n.1
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='time_register' stmt=$444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 440
DEBUG:numba.core.ssa:idom 344 from label 440
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:find_def_from_top label 278
DEBUG:numba.core.ssa:idom 186 from label 278
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:find_def_from_top label 110
DEBUG:numba.core.ssa:idom 108 from label 110
DEBUG:numba.core.ssa:find_def_from_bottom label 108
DEBUG:numba.core.ssa:replaced with: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001F59FF7E680>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
INFO:werkzeug: * Detected change in 'D:\\Freelance Project\\Web_Klasifikasi_Suara\\app.py', reloading
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.201.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:24:08] "GET /trainmodel HTTP/1.1" 200 -
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=10)
           2	LOAD_GLOBAL(arg=0, lineno=10)
           4	LOAD_CONST(arg=1, lineno=10)
           6	LOAD_FAST(arg=2, lineno=10)
           8	CALL_FUNCTION(arg=2, lineno=10)
          10	STORE_FAST(arg=6, lineno=10)
          12	LOAD_CONST(arg=1, lineno=11)
          14	LOAD_FAST(arg=2, lineno=11)
          16	BINARY_TRUE_DIVIDE(arg=None, lineno=11)
          18	STORE_FAST(arg=7, lineno=11)
          20	LOAD_GLOBAL(arg=1, lineno=12)
          22	LOAD_FAST(arg=6, lineno=12)
          24	LOAD_FAST(arg=5, lineno=12)
          26	BINARY_MULTIPLY(arg=None, lineno=12)
          28	CALL_FUNCTION(arg=1, lineno=12)
          30	STORE_FAST(arg=8, lineno=12)
          32	LOAD_CONST(arg=2, lineno=13)
          34	STORE_FAST(arg=9, lineno=13)
          36	LOAD_CONST(arg=3, lineno=15)
          38	STORE_FAST(arg=10, lineno=15)
          40	LOAD_CONST(arg=2, lineno=16)
          42	STORE_FAST(arg=11, lineno=16)
          44	LOAD_CONST(arg=2, lineno=17)
          46	STORE_FAST(arg=12, lineno=17)
          48	LOAD_CONST(arg=3, lineno=18)
          50	STORE_FAST(arg=13, lineno=18)
          52	LOAD_CONST(arg=2, lineno=19)
          54	STORE_FAST(arg=14, lineno=19)
          56	LOAD_CONST(arg=2, lineno=20)
          58	STORE_FAST(arg=15, lineno=20)
          60	LOAD_FAST(arg=3, lineno=22)
          62	LOAD_ATTR(arg=2, lineno=22)
          64	LOAD_CONST(arg=3, lineno=22)
          66	BINARY_SUBSCR(arg=None, lineno=22)
          68	STORE_FAST(arg=16, lineno=22)
          70	LOAD_FAST(arg=0, lineno=23)
          72	LOAD_ATTR(arg=2, lineno=23)
          74	LOAD_CONST(arg=3, lineno=23)
          76	BINARY_SUBSCR(arg=None, lineno=23)
          78	STORE_FAST(arg=17, lineno=23)
          80	LOAD_FAST(arg=1, lineno=24)
          82	LOAD_ATTR(arg=2, lineno=24)
          84	LOAD_CONST(arg=3, lineno=24)
          86	BINARY_SUBSCR(arg=None, lineno=24)
          88	STORE_FAST(arg=18, lineno=24)
          90	LOAD_FAST(arg=1, lineno=25)
          92	LOAD_ATTR(arg=2, lineno=25)
          94	LOAD_CONST(arg=4, lineno=25)
          96	BINARY_SUBSCR(arg=None, lineno=25)
          98	STORE_FAST(arg=19, lineno=25)
         100	LOAD_GLOBAL(arg=3, lineno=27)
         102	LOAD_FAST(arg=18, lineno=27)
         104	CALL_FUNCTION(arg=1, lineno=27)
         106	GET_ITER(arg=None, lineno=27)
>        108	FOR_ITER(arg=170, lineno=27)
         110	STORE_FAST(arg=20, lineno=27)
         112	LOAD_GLOBAL(arg=1, lineno=29)
         114	LOAD_FAST(arg=9, lineno=29)
         116	CALL_FUNCTION(arg=1, lineno=29)
         118	STORE_FAST(arg=10, lineno=29)
         120	LOAD_FAST(arg=6, lineno=32)
         122	LOAD_FAST(arg=9, lineno=32)
         124	LOAD_FAST(arg=10, lineno=32)
         126	BINARY_SUBTRACT(arg=None, lineno=32)
         128	BINARY_MULTIPLY(arg=None, lineno=32)
         130	STORE_FAST(arg=11, lineno=32)
         132	LOAD_FAST(arg=11, lineno=35)
         134	LOAD_FAST(arg=5, lineno=35)
         136	BINARY_MULTIPLY(arg=None, lineno=35)
         138	STORE_FAST(arg=12, lineno=35)
         140	LOAD_GLOBAL(arg=1, lineno=36)
         142	LOAD_FAST(arg=12, lineno=36)
         144	CALL_FUNCTION(arg=1, lineno=36)
         146	STORE_FAST(arg=13, lineno=36)
         148	LOAD_FAST(arg=12, lineno=39)
         150	LOAD_FAST(arg=13, lineno=39)
         152	BINARY_SUBTRACT(arg=None, lineno=39)
         154	STORE_FAST(arg=14, lineno=39)
         156	LOAD_GLOBAL(arg=0, lineno=42)
         158	LOAD_FAST(arg=10, lineno=42)
         160	LOAD_CONST(arg=4, lineno=42)
         162	BINARY_ADD(arg=None, lineno=42)
         164	LOAD_FAST(arg=16, lineno=42)
         166	LOAD_FAST(arg=13, lineno=42)
         168	BINARY_SUBTRACT(arg=None, lineno=42)
         170	LOAD_FAST(arg=8, lineno=42)
         172	BINARY_FLOOR_DIVIDE(arg=None, lineno=42)
         174	CALL_FUNCTION(arg=2, lineno=42)
         176	STORE_FAST(arg=21, lineno=42)
         178	LOAD_GLOBAL(arg=3, lineno=43)
         180	LOAD_FAST(arg=21, lineno=43)
         182	CALL_FUNCTION(arg=1, lineno=43)
         184	GET_ITER(arg=None, lineno=43)
>        186	FOR_ITER(arg=45, lineno=43)
         188	STORE_FAST(arg=22, lineno=43)
         190	LOAD_FAST(arg=3, lineno=45)
         192	LOAD_FAST(arg=13, lineno=45)
         194	LOAD_FAST(arg=22, lineno=45)
         196	LOAD_FAST(arg=8, lineno=45)
         198	BINARY_MULTIPLY(arg=None, lineno=45)
         200	BINARY_ADD(arg=None, lineno=45)
         202	BINARY_SUBSCR(arg=None, lineno=45)
         204	LOAD_FAST(arg=14, lineno=45)
         206	LOAD_FAST(arg=4, lineno=45)
         208	LOAD_FAST(arg=13, lineno=45)
         210	LOAD_FAST(arg=22, lineno=45)
         212	LOAD_FAST(arg=8, lineno=45)
         214	BINARY_MULTIPLY(arg=None, lineno=45)
         216	BINARY_ADD(arg=None, lineno=45)
         218	BINARY_SUBSCR(arg=None, lineno=45)
         220	BINARY_MULTIPLY(arg=None, lineno=45)
         222	BINARY_ADD(arg=None, lineno=45)
         224	STORE_FAST(arg=15, lineno=45)
         226	LOAD_GLOBAL(arg=3, lineno=46)
         228	LOAD_FAST(arg=19, lineno=46)
         230	CALL_FUNCTION(arg=1, lineno=46)
         232	GET_ITER(arg=None, lineno=46)
>        234	FOR_ITER(arg=20, lineno=46)
         236	STORE_FAST(arg=23, lineno=46)
         238	LOAD_FAST(arg=1, lineno=47)
         240	LOAD_FAST(arg=20, lineno=47)
         242	LOAD_FAST(arg=23, lineno=47)
         244	BUILD_TUPLE(arg=2, lineno=47)
         246	DUP_TOP_TWO(arg=None, lineno=47)
         248	BINARY_SUBSCR(arg=None, lineno=47)
         250	LOAD_FAST(arg=15, lineno=47)
         252	LOAD_FAST(arg=0, lineno=47)
         254	LOAD_FAST(arg=10, lineno=47)
         256	LOAD_FAST(arg=22, lineno=47)
         258	BINARY_SUBTRACT(arg=None, lineno=47)
         260	LOAD_FAST(arg=23, lineno=47)
         262	BUILD_TUPLE(arg=2, lineno=47)
         264	BINARY_SUBSCR(arg=None, lineno=47)
         266	BINARY_MULTIPLY(arg=None, lineno=47)
         268	INPLACE_ADD(arg=None, lineno=47)
         270	ROT_THREE(arg=None, lineno=47)
         272	STORE_SUBSCR(arg=None, lineno=47)
         274	JUMP_ABSOLUTE(arg=118, lineno=47)
>        276	JUMP_ABSOLUTE(arg=94, lineno=46)
>        278	LOAD_FAST(arg=6, lineno=50)
         280	LOAD_FAST(arg=11, lineno=50)
         282	BINARY_SUBTRACT(arg=None, lineno=50)
         284	STORE_FAST(arg=11, lineno=50)
         286	LOAD_FAST(arg=11, lineno=53)
         288	LOAD_FAST(arg=5, lineno=53)
         290	BINARY_MULTIPLY(arg=None, lineno=53)
         292	STORE_FAST(arg=12, lineno=53)
         294	LOAD_GLOBAL(arg=1, lineno=54)
         296	LOAD_FAST(arg=12, lineno=54)
         298	CALL_FUNCTION(arg=1, lineno=54)
         300	STORE_FAST(arg=13, lineno=54)
         302	LOAD_FAST(arg=12, lineno=57)
         304	LOAD_FAST(arg=13, lineno=57)
         306	BINARY_SUBTRACT(arg=None, lineno=57)
         308	STORE_FAST(arg=14, lineno=57)
         310	LOAD_GLOBAL(arg=0, lineno=60)
         312	LOAD_FAST(arg=17, lineno=60)
         314	LOAD_FAST(arg=10, lineno=60)
         316	BINARY_SUBTRACT(arg=None, lineno=60)
         318	LOAD_CONST(arg=4, lineno=60)
         320	BINARY_SUBTRACT(arg=None, lineno=60)
         322	LOAD_FAST(arg=16, lineno=60)
         324	LOAD_FAST(arg=13, lineno=60)
         326	BINARY_SUBTRACT(arg=None, lineno=60)
         328	LOAD_FAST(arg=8, lineno=60)
         330	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         332	CALL_FUNCTION(arg=2, lineno=60)
         334	STORE_FAST(arg=24, lineno=60)
         336	LOAD_GLOBAL(arg=3, lineno=61)
         338	LOAD_FAST(arg=24, lineno=61)
         340	CALL_FUNCTION(arg=1, lineno=61)
         342	GET_ITER(arg=None, lineno=61)
>        344	FOR_ITER(arg=47, lineno=61)
         346	STORE_FAST(arg=25, lineno=61)
         348	LOAD_FAST(arg=3, lineno=62)
         350	LOAD_FAST(arg=13, lineno=62)
         352	LOAD_FAST(arg=25, lineno=62)
         354	LOAD_FAST(arg=8, lineno=62)
         356	BINARY_MULTIPLY(arg=None, lineno=62)
         358	BINARY_ADD(arg=None, lineno=62)
         360	BINARY_SUBSCR(arg=None, lineno=62)
         362	LOAD_FAST(arg=14, lineno=62)
         364	LOAD_FAST(arg=4, lineno=62)
         366	LOAD_FAST(arg=13, lineno=62)
         368	LOAD_FAST(arg=25, lineno=62)
         370	LOAD_FAST(arg=8, lineno=62)
         372	BINARY_MULTIPLY(arg=None, lineno=62)
         374	BINARY_ADD(arg=None, lineno=62)
         376	BINARY_SUBSCR(arg=None, lineno=62)
         378	BINARY_MULTIPLY(arg=None, lineno=62)
         380	BINARY_ADD(arg=None, lineno=62)
         382	STORE_FAST(arg=15, lineno=62)
         384	LOAD_GLOBAL(arg=3, lineno=63)
         386	LOAD_FAST(arg=19, lineno=63)
         388	CALL_FUNCTION(arg=1, lineno=63)
         390	GET_ITER(arg=None, lineno=63)
>        392	FOR_ITER(arg=22, lineno=63)
         394	STORE_FAST(arg=23, lineno=63)
         396	LOAD_FAST(arg=1, lineno=64)
         398	LOAD_FAST(arg=20, lineno=64)
         400	LOAD_FAST(arg=23, lineno=64)
         402	BUILD_TUPLE(arg=2, lineno=64)
         404	DUP_TOP_TWO(arg=None, lineno=64)
         406	BINARY_SUBSCR(arg=None, lineno=64)
         408	LOAD_FAST(arg=15, lineno=64)
         410	LOAD_FAST(arg=0, lineno=64)
         412	LOAD_FAST(arg=10, lineno=64)
         414	LOAD_FAST(arg=25, lineno=64)
         416	BINARY_ADD(arg=None, lineno=64)
         418	LOAD_CONST(arg=4, lineno=64)
         420	BINARY_ADD(arg=None, lineno=64)
         422	LOAD_FAST(arg=23, lineno=64)
         424	BUILD_TUPLE(arg=2, lineno=64)
         426	BINARY_SUBSCR(arg=None, lineno=64)
         428	BINARY_MULTIPLY(arg=None, lineno=64)
         430	INPLACE_ADD(arg=None, lineno=64)
         432	ROT_THREE(arg=None, lineno=64)
         434	STORE_SUBSCR(arg=None, lineno=64)
         436	JUMP_ABSOLUTE(arg=197, lineno=64)
>        438	JUMP_ABSOLUTE(arg=173, lineno=63)
>        440	LOAD_FAST(arg=9, lineno=67)
         442	LOAD_FAST(arg=7, lineno=67)
         444	INPLACE_ADD(arg=None, lineno=67)
         446	STORE_FAST(arg=9, lineno=67)
         448	JUMP_ABSOLUTE(arg=55, lineno=67)
>        450	LOAD_CONST(arg=0, lineno=27)
         452	RETURN_VALUE(arg=None, lineno=27)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=10)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=10)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=10)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=10)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=10)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$sample_ratio6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=STORE_FAST(arg=6, lineno=10)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=11)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=11)
DEBUG:numba.core.byteflow:stack ['$const12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=11)
DEBUG:numba.core.byteflow:stack ['$const12.4', '$sample_ratio14.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=STORE_FAST(arg=7, lineno=11)
DEBUG:numba.core.byteflow:stack ['$16binary_true_divide.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=12)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=6, lineno=12)
DEBUG:numba.core.byteflow:stack ['$20load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=5, lineno=12)
DEBUG:numba.core.byteflow:stack ['$20load_global.7', '$scale22.8']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=12)
DEBUG:numba.core.byteflow:stack ['$20load_global.7', '$scale22.8', '$num_table24.9']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=1, lineno=12)
DEBUG:numba.core.byteflow:stack ['$20load_global.7', '$26binary_multiply.10']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=8, lineno=12)
DEBUG:numba.core.byteflow:stack ['$28call_function.11']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=13)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=9, lineno=13)
DEBUG:numba.core.byteflow:stack ['$const32.12']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=15)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=STORE_FAST(arg=10, lineno=15)
DEBUG:numba.core.byteflow:stack ['$const36.13']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=16)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=STORE_FAST(arg=11, lineno=16)
DEBUG:numba.core.byteflow:stack ['$const40.14']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=17)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=12, lineno=17)
DEBUG:numba.core.byteflow:stack ['$const44.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=18)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=13, lineno=18)
DEBUG:numba.core.byteflow:stack ['$const48.16']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=19)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_FAST(arg=14, lineno=19)
DEBUG:numba.core.byteflow:stack ['$const52.17']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=STORE_FAST(arg=15, lineno=20)
DEBUG:numba.core.byteflow:stack ['$const56.18']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=22)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_ATTR(arg=2, lineno=22)
DEBUG:numba.core.byteflow:stack ['$interp_win60.19']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_CONST(arg=3, lineno=22)
DEBUG:numba.core.byteflow:stack ['$62load_attr.20']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=22)
DEBUG:numba.core.byteflow:stack ['$62load_attr.20', '$const64.21']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=STORE_FAST(arg=16, lineno=22)
DEBUG:numba.core.byteflow:stack ['$66binary_subscr.22']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_ATTR(arg=2, lineno=23)
DEBUG:numba.core.byteflow:stack ['$x70.23']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_CONST(arg=3, lineno=23)
DEBUG:numba.core.byteflow:stack ['$72load_attr.24']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=23)
DEBUG:numba.core.byteflow:stack ['$72load_attr.24', '$const74.25']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_FAST(arg=17, lineno=23)
DEBUG:numba.core.byteflow:stack ['$76binary_subscr.26']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=24)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_ATTR(arg=2, lineno=24)
DEBUG:numba.core.byteflow:stack ['$y80.27']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_CONST(arg=3, lineno=24)
DEBUG:numba.core.byteflow:stack ['$82load_attr.28']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=24)
DEBUG:numba.core.byteflow:stack ['$82load_attr.28', '$const84.29']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=STORE_FAST(arg=18, lineno=24)
DEBUG:numba.core.byteflow:stack ['$86binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=25)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_ATTR(arg=2, lineno=25)
DEBUG:numba.core.byteflow:stack ['$y90.31']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_CONST(arg=4, lineno=25)
DEBUG:numba.core.byteflow:stack ['$92load_attr.32']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=25)
DEBUG:numba.core.byteflow:stack ['$92load_attr.32', '$const94.33']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=STORE_FAST(arg=19, lineno=25)
DEBUG:numba.core.byteflow:stack ['$96binary_subscr.34']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_GLOBAL(arg=3, lineno=27)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=18, lineno=27)
DEBUG:numba.core.byteflow:stack ['$100load_global.35']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=27)
DEBUG:numba.core.byteflow:stack ['$100load_global.35', '$n_out102.36']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=GET_ITER(arg=None, lineno=27)
DEBUG:numba.core.byteflow:stack ['$104call_function.37']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=108, stack=('$106get_iter.38',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=108 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi108.0']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=FOR_ITER(arg=170, lineno=27)
DEBUG:numba.core.byteflow:stack ['$phi108.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=450, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=('$phi108.0', '$108for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=450 nstack_initial=0), State(pc_initial=110 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=450, inst=LOAD_CONST(arg=0, lineno=27)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=452, inst=RETURN_VALUE(arg=None, lineno=27)
DEBUG:numba.core.byteflow:stack ['$const450.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=110 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi110.0', '$phi110.1']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=STORE_FAST(arg=20, lineno=27)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$phi110.1']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_GLOBAL(arg=1, lineno=29)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_FAST(arg=9, lineno=29)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$112load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=29)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$112load_global.2', '$time_register114.3']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=STORE_FAST(arg=10, lineno=29)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$116call_function.4']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_FAST(arg=6, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=9, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$scale120.5']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_FAST(arg=10, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$scale120.5', '$time_register122.6']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=BINARY_SUBTRACT(arg=None, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$scale120.5', '$time_register122.6', '$n124.7']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=BINARY_MULTIPLY(arg=None, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$scale120.5', '$126binary_subtract.8']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=STORE_FAST(arg=11, lineno=32)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$128binary_multiply.9']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_FAST(arg=11, lineno=35)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_FAST(arg=5, lineno=35)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$frac132.10']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=BINARY_MULTIPLY(arg=None, lineno=35)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$frac132.10', '$num_table134.11']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=STORE_FAST(arg=12, lineno=35)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$136binary_multiply.12']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=36)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_FAST(arg=12, lineno=36)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$140load_global.13']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=CALL_FUNCTION(arg=1, lineno=36)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$140load_global.13', '$index_frac142.14']
DEBUG:numba.core.byteflow:dispatch pc=146, inst=STORE_FAST(arg=13, lineno=36)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$144call_function.15']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=39)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_FAST(arg=13, lineno=39)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$index_frac148.16']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=BINARY_SUBTRACT(arg=None, lineno=39)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$index_frac148.16', '$offset150.17']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=STORE_FAST(arg=14, lineno=39)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$152binary_subtract.18']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_GLOBAL(arg=0, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_FAST(arg=10, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=LOAD_CONST(arg=4, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$n158.20']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=BINARY_ADD(arg=None, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$n158.20', '$const160.21']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_FAST(arg=16, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=LOAD_FAST(arg=13, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$nwin164.23']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=BINARY_SUBTRACT(arg=None, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$nwin164.23', '$offset166.24']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=LOAD_FAST(arg=8, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$168binary_subtract.25']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$168binary_subtract.25', '$index_step170.26']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=CALL_FUNCTION(arg=2, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$156load_global.19', '$162binary_add.22', '$172binary_floor_divide.27']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=STORE_FAST(arg=21, lineno=42)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$174call_function.28']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=LOAD_GLOBAL(arg=3, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi110.0']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=LOAD_FAST(arg=21, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$178load_global.29']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=CALL_FUNCTION(arg=1, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$178load_global.29', '$i_max180.30']
DEBUG:numba.core.byteflow:dispatch pc=184, inst=GET_ITER(arg=None, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi110.0', '$182call_function.31']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=186, stack=('$phi110.0', '$184get_iter.32'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=186 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi186.0', '$phi186.1']
DEBUG:numba.core.byteflow:dispatch pc=186, inst=FOR_ITER(arg=45, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi186.0', '$phi186.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=278, stack=('$phi186.0',), blockstack=(), npush=0), Edge(pc=188, stack=('$phi186.0', '$phi186.1', '$186for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=278 nstack_initial=1), State(pc_initial=188 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=278, inst=LOAD_FAST(arg=6, lineno=50)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=280, inst=LOAD_FAST(arg=11, lineno=50)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$scale278.1']
DEBUG:numba.core.byteflow:dispatch pc=282, inst=BINARY_SUBTRACT(arg=None, lineno=50)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$scale278.1', '$frac280.2']
DEBUG:numba.core.byteflow:dispatch pc=284, inst=STORE_FAST(arg=11, lineno=50)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$282binary_subtract.3']
DEBUG:numba.core.byteflow:dispatch pc=286, inst=LOAD_FAST(arg=11, lineno=53)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=288, inst=LOAD_FAST(arg=5, lineno=53)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$frac286.4']
DEBUG:numba.core.byteflow:dispatch pc=290, inst=BINARY_MULTIPLY(arg=None, lineno=53)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$frac286.4', '$num_table288.5']
DEBUG:numba.core.byteflow:dispatch pc=292, inst=STORE_FAST(arg=12, lineno=53)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$290binary_multiply.6']
DEBUG:numba.core.byteflow:dispatch pc=294, inst=LOAD_GLOBAL(arg=1, lineno=54)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=296, inst=LOAD_FAST(arg=12, lineno=54)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$294load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=298, inst=CALL_FUNCTION(arg=1, lineno=54)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$294load_global.7', '$index_frac296.8']
DEBUG:numba.core.byteflow:dispatch pc=300, inst=STORE_FAST(arg=13, lineno=54)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$298call_function.9']
DEBUG:numba.core.byteflow:dispatch pc=302, inst=LOAD_FAST(arg=12, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=304, inst=LOAD_FAST(arg=13, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$index_frac302.10']
DEBUG:numba.core.byteflow:dispatch pc=306, inst=BINARY_SUBTRACT(arg=None, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$index_frac302.10', '$offset304.11']
DEBUG:numba.core.byteflow:dispatch pc=308, inst=STORE_FAST(arg=14, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$306binary_subtract.12']
DEBUG:numba.core.byteflow:dispatch pc=310, inst=LOAD_GLOBAL(arg=0, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=312, inst=LOAD_FAST(arg=17, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13']
DEBUG:numba.core.byteflow:dispatch pc=314, inst=LOAD_FAST(arg=10, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$n_orig312.14']
DEBUG:numba.core.byteflow:dispatch pc=316, inst=BINARY_SUBTRACT(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$n_orig312.14', '$n314.15']
DEBUG:numba.core.byteflow:dispatch pc=318, inst=LOAD_CONST(arg=4, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$316binary_subtract.16']
DEBUG:numba.core.byteflow:dispatch pc=320, inst=BINARY_SUBTRACT(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$316binary_subtract.16', '$const318.17']
DEBUG:numba.core.byteflow:dispatch pc=322, inst=LOAD_FAST(arg=16, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18']
DEBUG:numba.core.byteflow:dispatch pc=324, inst=LOAD_FAST(arg=13, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$nwin322.19']
DEBUG:numba.core.byteflow:dispatch pc=326, inst=BINARY_SUBTRACT(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$nwin322.19', '$offset324.20']
DEBUG:numba.core.byteflow:dispatch pc=328, inst=LOAD_FAST(arg=8, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$326binary_subtract.21']
DEBUG:numba.core.byteflow:dispatch pc=330, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$326binary_subtract.21', '$index_step328.22']
DEBUG:numba.core.byteflow:dispatch pc=332, inst=CALL_FUNCTION(arg=2, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$310load_global.13', '$320binary_subtract.18', '$330binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=334, inst=STORE_FAST(arg=24, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$332call_function.24']
DEBUG:numba.core.byteflow:dispatch pc=336, inst=LOAD_GLOBAL(arg=3, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi278.0']
DEBUG:numba.core.byteflow:dispatch pc=338, inst=LOAD_FAST(arg=24, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$336load_global.25']
DEBUG:numba.core.byteflow:dispatch pc=340, inst=CALL_FUNCTION(arg=1, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$336load_global.25', '$k_max338.26']
DEBUG:numba.core.byteflow:dispatch pc=342, inst=GET_ITER(arg=None, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi278.0', '$340call_function.27']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=344, stack=('$phi278.0', '$342get_iter.28'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=188 nstack_initial=3), State(pc_initial=344 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi188.0', '$phi188.1', '$phi188.2']
DEBUG:numba.core.byteflow:dispatch pc=188, inst=STORE_FAST(arg=22, lineno=43)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$phi188.2']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=LOAD_FAST(arg=3, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1']
DEBUG:numba.core.byteflow:dispatch pc=192, inst=LOAD_FAST(arg=13, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3']
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_FAST(arg=22, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$offset192.4']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$offset192.4', '$i194.5']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=BINARY_MULTIPLY(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$offset192.4', '$i194.5', '$index_step196.6']
DEBUG:numba.core.byteflow:dispatch pc=200, inst=BINARY_ADD(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$offset192.4', '$198binary_multiply.7']
DEBUG:numba.core.byteflow:dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$interp_win190.3', '$200binary_add.8']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=LOAD_FAST(arg=14, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=LOAD_FAST(arg=4, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10']
DEBUG:numba.core.byteflow:dispatch pc=208, inst=LOAD_FAST(arg=13, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11']
DEBUG:numba.core.byteflow:dispatch pc=210, inst=LOAD_FAST(arg=22, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$offset208.12']
DEBUG:numba.core.byteflow:dispatch pc=212, inst=LOAD_FAST(arg=8, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$offset208.12', '$i210.13']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$offset208.12', '$i210.13', '$index_step212.14']
DEBUG:numba.core.byteflow:dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$offset208.12', '$214binary_multiply.15']
DEBUG:numba.core.byteflow:dispatch pc=218, inst=BINARY_SUBSCR(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$interp_delta206.11', '$216binary_add.16']
DEBUG:numba.core.byteflow:dispatch pc=220, inst=BINARY_MULTIPLY(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$eta204.10', '$218binary_subscr.17']
DEBUG:numba.core.byteflow:dispatch pc=222, inst=BINARY_ADD(arg=None, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$202binary_subscr.9', '$220binary_multiply.18']
DEBUG:numba.core.byteflow:dispatch pc=224, inst=STORE_FAST(arg=15, lineno=45)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$222binary_add.19']
DEBUG:numba.core.byteflow:dispatch pc=226, inst=LOAD_GLOBAL(arg=3, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1']
DEBUG:numba.core.byteflow:dispatch pc=228, inst=LOAD_FAST(arg=19, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$226load_global.20']
DEBUG:numba.core.byteflow:dispatch pc=230, inst=CALL_FUNCTION(arg=1, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$226load_global.20', '$n_channels228.21']
DEBUG:numba.core.byteflow:dispatch pc=232, inst=GET_ITER(arg=None, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi188.0', '$phi188.1', '$230call_function.22']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=234, stack=('$phi188.0', '$phi188.1', '$232get_iter.23'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=344 nstack_initial=2), State(pc_initial=234 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi344.0', '$phi344.1']
DEBUG:numba.core.byteflow:dispatch pc=344, inst=FOR_ITER(arg=47, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi344.0', '$phi344.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=440, stack=('$phi344.0',), blockstack=(), npush=0), Edge(pc=346, stack=('$phi344.0', '$phi344.1', '$344for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=234 nstack_initial=3), State(pc_initial=440 nstack_initial=1), State(pc_initial=346 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi234.0', '$phi234.1', '$phi234.2']
DEBUG:numba.core.byteflow:dispatch pc=234, inst=FOR_ITER(arg=20, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi234.0', '$phi234.1', '$phi234.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=276, stack=('$phi234.0', '$phi234.1'), blockstack=(), npush=0), Edge(pc=236, stack=('$phi234.0', '$phi234.1', '$phi234.2', '$234for_iter.4'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=440 nstack_initial=1), State(pc_initial=346 nstack_initial=3), State(pc_initial=276 nstack_initial=2), State(pc_initial=236 nstack_initial=4)])
DEBUG:numba.core.byteflow:stack: ['$phi440.0']
DEBUG:numba.core.byteflow:dispatch pc=440, inst=LOAD_FAST(arg=9, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0']
DEBUG:numba.core.byteflow:dispatch pc=442, inst=LOAD_FAST(arg=7, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0', '$time_register440.1']
DEBUG:numba.core.byteflow:dispatch pc=444, inst=INPLACE_ADD(arg=None, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0', '$time_register440.1', '$time_increment442.2']
DEBUG:numba.core.byteflow:dispatch pc=446, inst=STORE_FAST(arg=9, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0', '$444inplace_add.3']
DEBUG:numba.core.byteflow:dispatch pc=448, inst=JUMP_ABSOLUTE(arg=55, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi440.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=108, stack=('$phi440.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=346 nstack_initial=3), State(pc_initial=276 nstack_initial=2), State(pc_initial=236 nstack_initial=4), State(pc_initial=108 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi346.0', '$phi346.1', '$phi346.2']
DEBUG:numba.core.byteflow:dispatch pc=346, inst=STORE_FAST(arg=25, lineno=61)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$phi346.2']
DEBUG:numba.core.byteflow:dispatch pc=348, inst=LOAD_FAST(arg=3, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1']
DEBUG:numba.core.byteflow:dispatch pc=350, inst=LOAD_FAST(arg=13, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3']
DEBUG:numba.core.byteflow:dispatch pc=352, inst=LOAD_FAST(arg=25, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$offset350.4']
DEBUG:numba.core.byteflow:dispatch pc=354, inst=LOAD_FAST(arg=8, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$offset350.4', '$k352.5']
DEBUG:numba.core.byteflow:dispatch pc=356, inst=BINARY_MULTIPLY(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$offset350.4', '$k352.5', '$index_step354.6']
DEBUG:numba.core.byteflow:dispatch pc=358, inst=BINARY_ADD(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$offset350.4', '$356binary_multiply.7']
DEBUG:numba.core.byteflow:dispatch pc=360, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$interp_win348.3', '$358binary_add.8']
DEBUG:numba.core.byteflow:dispatch pc=362, inst=LOAD_FAST(arg=14, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9']
DEBUG:numba.core.byteflow:dispatch pc=364, inst=LOAD_FAST(arg=4, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10']
DEBUG:numba.core.byteflow:dispatch pc=366, inst=LOAD_FAST(arg=13, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11']
DEBUG:numba.core.byteflow:dispatch pc=368, inst=LOAD_FAST(arg=25, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$offset366.12']
DEBUG:numba.core.byteflow:dispatch pc=370, inst=LOAD_FAST(arg=8, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$offset366.12', '$k368.13']
DEBUG:numba.core.byteflow:dispatch pc=372, inst=BINARY_MULTIPLY(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$offset366.12', '$k368.13', '$index_step370.14']
DEBUG:numba.core.byteflow:dispatch pc=374, inst=BINARY_ADD(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$offset366.12', '$372binary_multiply.15']
DEBUG:numba.core.byteflow:dispatch pc=376, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$interp_delta364.11', '$374binary_add.16']
DEBUG:numba.core.byteflow:dispatch pc=378, inst=BINARY_MULTIPLY(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$eta362.10', '$376binary_subscr.17']
DEBUG:numba.core.byteflow:dispatch pc=380, inst=BINARY_ADD(arg=None, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$360binary_subscr.9', '$378binary_multiply.18']
DEBUG:numba.core.byteflow:dispatch pc=382, inst=STORE_FAST(arg=15, lineno=62)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$380binary_add.19']
DEBUG:numba.core.byteflow:dispatch pc=384, inst=LOAD_GLOBAL(arg=3, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1']
DEBUG:numba.core.byteflow:dispatch pc=386, inst=LOAD_FAST(arg=19, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$384load_global.20']
DEBUG:numba.core.byteflow:dispatch pc=388, inst=CALL_FUNCTION(arg=1, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$384load_global.20', '$n_channels386.21']
DEBUG:numba.core.byteflow:dispatch pc=390, inst=GET_ITER(arg=None, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi346.0', '$phi346.1', '$388call_function.22']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=392, stack=('$phi346.0', '$phi346.1', '$390get_iter.23'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=276 nstack_initial=2), State(pc_initial=236 nstack_initial=4), State(pc_initial=108 nstack_initial=1), State(pc_initial=392 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi276.0', '$phi276.1']
DEBUG:numba.core.byteflow:dispatch pc=276, inst=JUMP_ABSOLUTE(arg=94, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi276.0', '$phi276.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=186, stack=('$phi276.0', '$phi276.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=236 nstack_initial=4), State(pc_initial=108 nstack_initial=1), State(pc_initial=392 nstack_initial=3), State(pc_initial=186 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi236.0', '$phi236.1', '$phi236.2', '$phi236.3']
DEBUG:numba.core.byteflow:dispatch pc=236, inst=STORE_FAST(arg=23, lineno=46)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$phi236.3']
DEBUG:numba.core.byteflow:dispatch pc=238, inst=LOAD_FAST(arg=1, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2']
DEBUG:numba.core.byteflow:dispatch pc=240, inst=LOAD_FAST(arg=20, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4']
DEBUG:numba.core.byteflow:dispatch pc=242, inst=LOAD_FAST(arg=23, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$t240.5']
DEBUG:numba.core.byteflow:dispatch pc=244, inst=BUILD_TUPLE(arg=2, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$t240.5', '$j242.6']
DEBUG:numba.core.byteflow:dispatch pc=246, inst=DUP_TOP_TWO(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=248, inst=BINARY_SUBSCR(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$246dup_top_two.8', '$246dup_top_two.9']
DEBUG:numba.core.byteflow:dispatch pc=250, inst=LOAD_FAST(arg=15, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=252, inst=LOAD_FAST(arg=0, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11']
DEBUG:numba.core.byteflow:dispatch pc=254, inst=LOAD_FAST(arg=10, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12']
DEBUG:numba.core.byteflow:dispatch pc=256, inst=LOAD_FAST(arg=22, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$n254.13']
DEBUG:numba.core.byteflow:dispatch pc=258, inst=BINARY_SUBTRACT(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$n254.13', '$i256.14']
DEBUG:numba.core.byteflow:dispatch pc=260, inst=LOAD_FAST(arg=23, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$258binary_subtract.15']
DEBUG:numba.core.byteflow:dispatch pc=262, inst=BUILD_TUPLE(arg=2, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$258binary_subtract.15', '$j260.16']
DEBUG:numba.core.byteflow:dispatch pc=264, inst=BINARY_SUBSCR(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$x252.12', '$262build_tuple.17']
DEBUG:numba.core.byteflow:dispatch pc=266, inst=BINARY_MULTIPLY(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$weight250.11', '$264binary_subscr.18']
DEBUG:numba.core.byteflow:dispatch pc=268, inst=INPLACE_ADD(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$248binary_subscr.10', '$266binary_multiply.19']
DEBUG:numba.core.byteflow:dispatch pc=270, inst=ROT_THREE(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$y238.4', '$244build_tuple.7', '$268inplace_add.20']
DEBUG:numba.core.byteflow:dispatch pc=272, inst=STORE_SUBSCR(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2', '$268inplace_add.20', '$y238.4', '$244build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=274, inst=JUMP_ABSOLUTE(arg=118, lineno=47)
DEBUG:numba.core.byteflow:stack ['$phi236.0', '$phi236.1', '$phi236.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=234, stack=('$phi236.0', '$phi236.1', '$phi236.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=108 nstack_initial=1), State(pc_initial=392 nstack_initial=3), State(pc_initial=186 nstack_initial=2), State(pc_initial=234 nstack_initial=3)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=392 nstack_initial=3), State(pc_initial=186 nstack_initial=2), State(pc_initial=234 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi392.0', '$phi392.1', '$phi392.2']
DEBUG:numba.core.byteflow:dispatch pc=392, inst=FOR_ITER(arg=22, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi392.0', '$phi392.1', '$phi392.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=438, stack=('$phi392.0', '$phi392.1'), blockstack=(), npush=0), Edge(pc=394, stack=('$phi392.0', '$phi392.1', '$phi392.2', '$392for_iter.4'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=186 nstack_initial=2), State(pc_initial=234 nstack_initial=3), State(pc_initial=438 nstack_initial=2), State(pc_initial=394 nstack_initial=4)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=234 nstack_initial=3), State(pc_initial=438 nstack_initial=2), State(pc_initial=394 nstack_initial=4)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=438 nstack_initial=2), State(pc_initial=394 nstack_initial=4)])
DEBUG:numba.core.byteflow:stack: ['$phi438.0', '$phi438.1']
DEBUG:numba.core.byteflow:dispatch pc=438, inst=JUMP_ABSOLUTE(arg=173, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi438.0', '$phi438.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=344, stack=('$phi438.0', '$phi438.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=394 nstack_initial=4), State(pc_initial=344 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi394.0', '$phi394.1', '$phi394.2', '$phi394.3']
DEBUG:numba.core.byteflow:dispatch pc=394, inst=STORE_FAST(arg=23, lineno=63)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$phi394.3']
DEBUG:numba.core.byteflow:dispatch pc=396, inst=LOAD_FAST(arg=1, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2']
DEBUG:numba.core.byteflow:dispatch pc=398, inst=LOAD_FAST(arg=20, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4']
DEBUG:numba.core.byteflow:dispatch pc=400, inst=LOAD_FAST(arg=23, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$t398.5']
DEBUG:numba.core.byteflow:dispatch pc=402, inst=BUILD_TUPLE(arg=2, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$t398.5', '$j400.6']
DEBUG:numba.core.byteflow:dispatch pc=404, inst=DUP_TOP_TWO(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=406, inst=BINARY_SUBSCR(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$404dup_top_two.8', '$404dup_top_two.9']
DEBUG:numba.core.byteflow:dispatch pc=408, inst=LOAD_FAST(arg=15, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=410, inst=LOAD_FAST(arg=0, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11']
DEBUG:numba.core.byteflow:dispatch pc=412, inst=LOAD_FAST(arg=10, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12']
DEBUG:numba.core.byteflow:dispatch pc=414, inst=LOAD_FAST(arg=25, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$n412.13']
DEBUG:numba.core.byteflow:dispatch pc=416, inst=BINARY_ADD(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$n412.13', '$k414.14']
DEBUG:numba.core.byteflow:dispatch pc=418, inst=LOAD_CONST(arg=4, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$416binary_add.15']
DEBUG:numba.core.byteflow:dispatch pc=420, inst=BINARY_ADD(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$416binary_add.15', '$const418.16']
DEBUG:numba.core.byteflow:dispatch pc=422, inst=LOAD_FAST(arg=23, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$420binary_add.17']
DEBUG:numba.core.byteflow:dispatch pc=424, inst=BUILD_TUPLE(arg=2, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$420binary_add.17', '$j422.18']
DEBUG:numba.core.byteflow:dispatch pc=426, inst=BINARY_SUBSCR(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$x410.12', '$424build_tuple.19']
DEBUG:numba.core.byteflow:dispatch pc=428, inst=BINARY_MULTIPLY(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$weight408.11', '$426binary_subscr.20']
DEBUG:numba.core.byteflow:dispatch pc=430, inst=INPLACE_ADD(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$406binary_subscr.10', '$428binary_multiply.21']
DEBUG:numba.core.byteflow:dispatch pc=432, inst=ROT_THREE(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$y396.4', '$402build_tuple.7', '$430inplace_add.22']
DEBUG:numba.core.byteflow:dispatch pc=434, inst=STORE_SUBSCR(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2', '$430inplace_add.22', '$y396.4', '$402build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=436, inst=JUMP_ABSOLUTE(arg=197, lineno=64)
DEBUG:numba.core.byteflow:stack ['$phi394.0', '$phi394.1', '$phi394.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=392, stack=('$phi394.0', '$phi394.1', '$phi394.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=344 nstack_initial=2), State(pc_initial=392 nstack_initial=3)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=392 nstack_initial=3)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=108 nstack_initial=1): {'$phi108.0'},
             State(pc_initial=110 nstack_initial=2): {'$phi110.1'},
             State(pc_initial=186 nstack_initial=2): {'$phi186.1'},
             State(pc_initial=188 nstack_initial=3): {'$phi188.2'},
             State(pc_initial=234 nstack_initial=3): {'$phi234.2'},
             State(pc_initial=236 nstack_initial=4): {'$phi236.3'},
             State(pc_initial=276 nstack_initial=2): set(),
             State(pc_initial=278 nstack_initial=1): set(),
             State(pc_initial=344 nstack_initial=2): {'$phi344.1'},
             State(pc_initial=346 nstack_initial=3): {'$phi346.2'},
             State(pc_initial=392 nstack_initial=3): {'$phi392.2'},
             State(pc_initial=394 nstack_initial=4): {'$phi394.3'},
             State(pc_initial=438 nstack_initial=2): set(),
             State(pc_initial=440 nstack_initial=1): set(),
             State(pc_initial=450 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi108.0': State(pc_initial=0 nstack_initial=0),
 '$phi110.1': State(pc_initial=108 nstack_initial=1),
 '$phi186.1': State(pc_initial=110 nstack_initial=2),
 '$phi188.2': State(pc_initial=186 nstack_initial=2),
 '$phi234.2': State(pc_initial=188 nstack_initial=3),
 '$phi236.3': State(pc_initial=234 nstack_initial=3),
 '$phi344.1': State(pc_initial=278 nstack_initial=1),
 '$phi346.2': State(pc_initial=344 nstack_initial=2),
 '$phi392.2': State(pc_initial=346 nstack_initial=3),
 '$phi394.3': State(pc_initial=392 nstack_initial=3)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi440.0',
                            State(pc_initial=440 nstack_initial=1))},
             '$phi110.0': {('$phi108.0',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$phi110.0',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi276.0',
                            State(pc_initial=276 nstack_initial=2))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi276.1',
                            State(pc_initial=276 nstack_initial=2))},
             '$phi188.0': {('$phi186.0',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi188.1': {('$phi186.1',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$phi188.0',
                            State(pc_initial=188 nstack_initial=3)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=4))},
             '$phi234.1': {('$phi188.1',
                            State(pc_initial=188 nstack_initial=3)),
                           ('$phi236.1',
                            State(pc_initial=236 nstack_initial=4))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3)),
                           ('$phi236.2',
                            State(pc_initial=236 nstack_initial=4))},
             '$phi236.0': {('$phi234.0',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi236.1': {('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi236.2': {('$phi234.2',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$phi234.0',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.1': {('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi278.0': {('$phi186.0',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi344.0': {('$phi278.0',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi438.0',
                            State(pc_initial=438 nstack_initial=2))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi438.1',
                            State(pc_initial=438 nstack_initial=2))},
             '$phi346.0': {('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi346.1': {('$phi344.1',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$phi346.0',
                            State(pc_initial=346 nstack_initial=3)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=4))},
             '$phi392.1': {('$phi346.1',
                            State(pc_initial=346 nstack_initial=3)),
                           ('$phi394.1',
                            State(pc_initial=394 nstack_initial=4))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3)),
                           ('$phi394.2',
                            State(pc_initial=394 nstack_initial=4))},
             '$phi394.0': {('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi394.1': {('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi394.2': {('$phi392.2',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.1': {('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi440.0': {('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi110.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi188.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi234.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2)),
                           ('$phi234.1',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3)),
                           ('$phi234.2',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi236.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi236.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi276.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi344.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=2)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi346.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi392.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1)),
                           ('$phi392.1',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3)),
                           ('$phi392.2',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi394.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi394.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi438.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi440.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi110.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi234.0',
                            State(pc_initial=234 nstack_initial=3)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi188.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi234.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi236.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi236.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi276.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi392.0',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi344.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi392.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi394.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi438.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi440.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi110.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi188.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi234.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi236.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi236.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi276.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi392.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi394.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi438.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi440.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi108.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi110.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi110.1': {('$108for_iter.2',
                            State(pc_initial=108 nstack_initial=1))},
             '$phi186.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi186.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi188.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi188.2': {('$186for_iter.3',
                            State(pc_initial=186 nstack_initial=2))},
             '$phi234.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi234.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi234.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi236.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi236.2': {('$232get_iter.23',
                            State(pc_initial=188 nstack_initial=3))},
             '$phi236.3': {('$234for_iter.4',
                            State(pc_initial=234 nstack_initial=3))},
             '$phi276.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi276.1': {('$184get_iter.32',
                            State(pc_initial=110 nstack_initial=2))},
             '$phi278.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi344.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi346.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi346.2': {('$344for_iter.3',
                            State(pc_initial=344 nstack_initial=2))},
             '$phi392.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi392.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi392.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi394.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi394.2': {('$390get_iter.23',
                            State(pc_initial=346 nstack_initial=3))},
             '$phi394.3': {('$392for_iter.4',
                            State(pc_initial=392 nstack_initial=3))},
             '$phi438.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi438.1': {('$342get_iter.28',
                            State(pc_initial=278 nstack_initial=1))},
             '$phi440.0': {('$106get_iter.38',
                            State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi108.0': {('$106get_iter.38', State(pc_initial=0 nstack_initial=0))},
 '$phi110.1': {('$108for_iter.2', State(pc_initial=108 nstack_initial=1))},
 '$phi186.1': {('$184get_iter.32', State(pc_initial=110 nstack_initial=2))},
 '$phi188.2': {('$186for_iter.3', State(pc_initial=186 nstack_initial=2))},
 '$phi234.2': {('$232get_iter.23', State(pc_initial=188 nstack_initial=3))},
 '$phi236.3': {('$234for_iter.4', State(pc_initial=234 nstack_initial=3))},
 '$phi344.1': {('$342get_iter.28', State(pc_initial=278 nstack_initial=1))},
 '$phi346.2': {('$344for_iter.3', State(pc_initial=344 nstack_initial=2))},
 '$phi392.2': {('$390get_iter.23', State(pc_initial=346 nstack_initial=3))},
 '$phi394.3': {('$392for_iter.4', State(pc_initial=392 nstack_initial=3))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi108.0': '$106get_iter.38'},
             State(pc_initial=108 nstack_initial=1): {'$phi110.1': '$108for_iter.2'},
             State(pc_initial=110 nstack_initial=2): {'$phi186.1': '$184get_iter.32'},
             State(pc_initial=186 nstack_initial=2): {'$phi188.2': '$186for_iter.3'},
             State(pc_initial=188 nstack_initial=3): {'$phi234.2': '$232get_iter.23'},
             State(pc_initial=234 nstack_initial=3): {'$phi236.3': '$234for_iter.4'},
             State(pc_initial=278 nstack_initial=1): {'$phi344.1': '$342get_iter.28'},
             State(pc_initial=344 nstack_initial=2): {'$phi346.2': '$344for_iter.3'},
             State(pc_initial=346 nstack_initial=3): {'$phi392.2': '$390get_iter.23'},
             State(pc_initial=392 nstack_initial=3): {'$phi394.3': '$392for_iter.4'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$sample_ratio6.2'}), (8, {'func': '$2load_global.0', 'args': ['$const4.1', '$sample_ratio6.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$sample_ratio14.5'}), (16, {'lhs': '$const12.4', 'rhs': '$sample_ratio14.5', 'res': '$16binary_true_divide.6'}), (18, {'value': '$16binary_true_divide.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$scale22.8'}), (24, {'res': '$num_table24.9'}), (26, {'lhs': '$scale22.8', 'rhs': '$num_table24.9', 'res': '$26binary_multiply.10'}), (28, {'func': '$20load_global.7', 'args': ['$26binary_multiply.10'], 'res': '$28call_function.11'}), (30, {'value': '$28call_function.11'}), (32, {'res': '$const32.12'}), (34, {'value': '$const32.12'}), (36, {'res': '$const36.13'}), (38, {'value': '$const36.13'}), (40, {'res': '$const40.14'}), (42, {'value': '$const40.14'}), (44, {'res': '$const44.15'}), (46, {'value': '$const44.15'}), (48, {'res': '$const48.16'}), (50, {'value': '$const48.16'}), (52, {'res': '$const52.17'}), (54, {'value': '$const52.17'}), (56, {'res': '$const56.18'}), (58, {'value': '$const56.18'}), (60, {'res': '$interp_win60.19'}), (62, {'item': '$interp_win60.19', 'res': '$62load_attr.20'}), (64, {'res': '$const64.21'}), (66, {'index': '$const64.21', 'target': '$62load_attr.20', 'res': '$66binary_subscr.22'}), (68, {'value': '$66binary_subscr.22'}), (70, {'res': '$x70.23'}), (72, {'item': '$x70.23', 'res': '$72load_attr.24'}), (74, {'res': '$const74.25'}), (76, {'index': '$const74.25', 'target': '$72load_attr.24', 'res': '$76binary_subscr.26'}), (78, {'value': '$76binary_subscr.26'}), (80, {'res': '$y80.27'}), (82, {'item': '$y80.27', 'res': '$82load_attr.28'}), (84, {'res': '$const84.29'}), (86, {'index': '$const84.29', 'target': '$82load_attr.28', 'res': '$86binary_subscr.30'}), (88, {'value': '$86binary_subscr.30'}), (90, {'res': '$y90.31'}), (92, {'item': '$y90.31', 'res': '$92load_attr.32'}), (94, {'res': '$const94.33'}), (96, {'index': '$const94.33', 'target': '$92load_attr.32', 'res': '$96binary_subscr.34'}), (98, {'value': '$96binary_subscr.34'}), (100, {'res': '$100load_global.35'}), (102, {'res': '$n_out102.36'}), (104, {'func': '$100load_global.35', 'args': ['$n_out102.36'], 'res': '$104call_function.37'}), (106, {'value': '$104call_function.37', 'res': '$106get_iter.38'})), outgoing_phis={'$phi108.0': '$106get_iter.38'}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ('$106get_iter.38',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=108 nstack_initial=1):
AdaptBlockInfo(insts=((108, {'iterator': '$phi108.0', 'pair': '$108for_iter.1', 'indval': '$108for_iter.2', 'pred': '$108for_iter.3'}),), outgoing_phis={'$phi110.1': '$108for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={450: (), 110: ('$phi108.0', '$108for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=110 nstack_initial=2):
AdaptBlockInfo(insts=((110, {'value': '$phi110.1'}), (112, {'res': '$112load_global.2'}), (114, {'res': '$time_register114.3'}), (116, {'func': '$112load_global.2', 'args': ['$time_register114.3'], 'res': '$116call_function.4'}), (118, {'value': '$116call_function.4'}), (120, {'res': '$scale120.5'}), (122, {'res': '$time_register122.6'}), (124, {'res': '$n124.7'}), (126, {'lhs': '$time_register122.6', 'rhs': '$n124.7', 'res': '$126binary_subtract.8'}), (128, {'lhs': '$scale120.5', 'rhs': '$126binary_subtract.8', 'res': '$128binary_multiply.9'}), (130, {'value': '$128binary_multiply.9'}), (132, {'res': '$frac132.10'}), (134, {'res': '$num_table134.11'}), (136, {'lhs': '$frac132.10', 'rhs': '$num_table134.11', 'res': '$136binary_multiply.12'}), (138, {'value': '$136binary_multiply.12'}), (140, {'res': '$140load_global.13'}), (142, {'res': '$index_frac142.14'}), (144, {'func': '$140load_global.13', 'args': ['$index_frac142.14'], 'res': '$144call_function.15'}), (146, {'value': '$144call_function.15'}), (148, {'res': '$index_frac148.16'}), (150, {'res': '$offset150.17'}), (152, {'lhs': '$index_frac148.16', 'rhs': '$offset150.17', 'res': '$152binary_subtract.18'}), (154, {'value': '$152binary_subtract.18'}), (156, {'res': '$156load_global.19'}), (158, {'res': '$n158.20'}), (160, {'res': '$const160.21'}), (162, {'lhs': '$n158.20', 'rhs': '$const160.21', 'res': '$162binary_add.22'}), (164, {'res': '$nwin164.23'}), (166, {'res': '$offset166.24'}), (168, {'lhs': '$nwin164.23', 'rhs': '$offset166.24', 'res': '$168binary_subtract.25'}), (170, {'res': '$index_step170.26'}), (172, {'lhs': '$168binary_subtract.25', 'rhs': '$index_step170.26', 'res': '$172binary_floor_divide.27'}), (174, {'func': '$156load_global.19', 'args': ['$162binary_add.22', '$172binary_floor_divide.27'], 'res': '$174call_function.28'}), (176, {'value': '$174call_function.28'}), (178, {'res': '$178load_global.29'}), (180, {'res': '$i_max180.30'}), (182, {'func': '$178load_global.29', 'args': ['$i_max180.30'], 'res': '$182call_function.31'}), (184, {'value': '$182call_function.31', 'res': '$184get_iter.32'})), outgoing_phis={'$phi186.1': '$184get_iter.32'}, blockstack=(), active_try_block=None, outgoing_edgepushed={186: ('$phi110.0', '$184get_iter.32')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=186 nstack_initial=2):
AdaptBlockInfo(insts=((186, {'iterator': '$phi186.1', 'pair': '$186for_iter.2', 'indval': '$186for_iter.3', 'pred': '$186for_iter.4'}),), outgoing_phis={'$phi188.2': '$186for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={278: ('$phi186.0',), 188: ('$phi186.0', '$phi186.1', '$186for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=188 nstack_initial=3):
AdaptBlockInfo(insts=((188, {'value': '$phi188.2'}), (190, {'res': '$interp_win190.3'}), (192, {'res': '$offset192.4'}), (194, {'res': '$i194.5'}), (196, {'res': '$index_step196.6'}), (198, {'lhs': '$i194.5', 'rhs': '$index_step196.6', 'res': '$198binary_multiply.7'}), (200, {'lhs': '$offset192.4', 'rhs': '$198binary_multiply.7', 'res': '$200binary_add.8'}), (202, {'index': '$200binary_add.8', 'target': '$interp_win190.3', 'res': '$202binary_subscr.9'}), (204, {'res': '$eta204.10'}), (206, {'res': '$interp_delta206.11'}), (208, {'res': '$offset208.12'}), (210, {'res': '$i210.13'}), (212, {'res': '$index_step212.14'}), (214, {'lhs': '$i210.13', 'rhs': '$index_step212.14', 'res': '$214binary_multiply.15'}), (216, {'lhs': '$offset208.12', 'rhs': '$214binary_multiply.15', 'res': '$216binary_add.16'}), (218, {'index': '$216binary_add.16', 'target': '$interp_delta206.11', 'res': '$218binary_subscr.17'}), (220, {'lhs': '$eta204.10', 'rhs': '$218binary_subscr.17', 'res': '$220binary_multiply.18'}), (222, {'lhs': '$202binary_subscr.9', 'rhs': '$220binary_multiply.18', 'res': '$222binary_add.19'}), (224, {'value': '$222binary_add.19'}), (226, {'res': '$226load_global.20'}), (228, {'res': '$n_channels228.21'}), (230, {'func': '$226load_global.20', 'args': ['$n_channels228.21'], 'res': '$230call_function.22'}), (232, {'value': '$230call_function.22', 'res': '$232get_iter.23'})), outgoing_phis={'$phi234.2': '$232get_iter.23'}, blockstack=(), active_try_block=None, outgoing_edgepushed={234: ('$phi188.0', '$phi188.1', '$232get_iter.23')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=234 nstack_initial=3):
AdaptBlockInfo(insts=((234, {'iterator': '$phi234.2', 'pair': '$234for_iter.3', 'indval': '$234for_iter.4', 'pred': '$234for_iter.5'}),), outgoing_phis={'$phi236.3': '$234for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={276: ('$phi234.0', '$phi234.1'), 236: ('$phi234.0', '$phi234.1', '$phi234.2', '$234for_iter.4')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=236 nstack_initial=4):
AdaptBlockInfo(insts=((236, {'value': '$phi236.3'}), (238, {'res': '$y238.4'}), (240, {'res': '$t240.5'}), (242, {'res': '$j242.6'}), (244, {'items': ['$t240.5', '$j242.6'], 'res': '$244build_tuple.7'}), (246, {'orig': ['$y238.4', '$244build_tuple.7'], 'duped': ['$246dup_top_two.8', '$246dup_top_two.9']}), (248, {'index': '$246dup_top_two.9', 'target': '$246dup_top_two.8', 'res': '$248binary_subscr.10'}), (250, {'res': '$weight250.11'}), (252, {'res': '$x252.12'}), (254, {'res': '$n254.13'}), (256, {'res': '$i256.14'}), (258, {'lhs': '$n254.13', 'rhs': '$i256.14', 'res': '$258binary_subtract.15'}), (260, {'res': '$j260.16'}), (262, {'items': ['$258binary_subtract.15', '$j260.16'], 'res': '$262build_tuple.17'}), (264, {'index': '$262build_tuple.17', 'target': '$x252.12', 'res': '$264binary_subscr.18'}), (266, {'lhs': '$weight250.11', 'rhs': '$264binary_subscr.18', 'res': '$266binary_multiply.19'}), (268, {'lhs': '$248binary_subscr.10', 'rhs': '$266binary_multiply.19', 'res': '$268inplace_add.20'}), (272, {'target': '$y238.4', 'index': '$244build_tuple.7', 'value': '$268inplace_add.20'}), (274, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={234: ('$phi236.0', '$phi236.1', '$phi236.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=276 nstack_initial=2):
AdaptBlockInfo(insts=((276, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={186: ('$phi276.0', '$phi276.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=278 nstack_initial=1):
AdaptBlockInfo(insts=((278, {'res': '$scale278.1'}), (280, {'res': '$frac280.2'}), (282, {'lhs': '$scale278.1', 'rhs': '$frac280.2', 'res': '$282binary_subtract.3'}), (284, {'value': '$282binary_subtract.3'}), (286, {'res': '$frac286.4'}), (288, {'res': '$num_table288.5'}), (290, {'lhs': '$frac286.4', 'rhs': '$num_table288.5', 'res': '$290binary_multiply.6'}), (292, {'value': '$290binary_multiply.6'}), (294, {'res': '$294load_global.7'}), (296, {'res': '$index_frac296.8'}), (298, {'func': '$294load_global.7', 'args': ['$index_frac296.8'], 'res': '$298call_function.9'}), (300, {'value': '$298call_function.9'}), (302, {'res': '$index_frac302.10'}), (304, {'res': '$offset304.11'}), (306, {'lhs': '$index_frac302.10', 'rhs': '$offset304.11', 'res': '$306binary_subtract.12'}), (308, {'value': '$306binary_subtract.12'}), (310, {'res': '$310load_global.13'}), (312, {'res': '$n_orig312.14'}), (314, {'res': '$n314.15'}), (316, {'lhs': '$n_orig312.14', 'rhs': '$n314.15', 'res': '$316binary_subtract.16'}), (318, {'res': '$const318.17'}), (320, {'lhs': '$316binary_subtract.16', 'rhs': '$const318.17', 'res': '$320binary_subtract.18'}), (322, {'res': '$nwin322.19'}), (324, {'res': '$offset324.20'}), (326, {'lhs': '$nwin322.19', 'rhs': '$offset324.20', 'res': '$326binary_subtract.21'}), (328, {'res': '$index_step328.22'}), (330, {'lhs': '$326binary_subtract.21', 'rhs': '$index_step328.22', 'res': '$330binary_floor_divide.23'}), (332, {'func': '$310load_global.13', 'args': ['$320binary_subtract.18', '$330binary_floor_divide.23'], 'res': '$332call_function.24'}), (334, {'value': '$332call_function.24'}), (336, {'res': '$336load_global.25'}), (338, {'res': '$k_max338.26'}), (340, {'func': '$336load_global.25', 'args': ['$k_max338.26'], 'res': '$340call_function.27'}), (342, {'value': '$340call_function.27', 'res': '$342get_iter.28'})), outgoing_phis={'$phi344.1': '$342get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: ('$phi278.0', '$342get_iter.28')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=344 nstack_initial=2):
AdaptBlockInfo(insts=((344, {'iterator': '$phi344.1', 'pair': '$344for_iter.2', 'indval': '$344for_iter.3', 'pred': '$344for_iter.4'}),), outgoing_phis={'$phi346.2': '$344for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={440: ('$phi344.0',), 346: ('$phi344.0', '$phi344.1', '$344for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=346 nstack_initial=3):
AdaptBlockInfo(insts=((346, {'value': '$phi346.2'}), (348, {'res': '$interp_win348.3'}), (350, {'res': '$offset350.4'}), (352, {'res': '$k352.5'}), (354, {'res': '$index_step354.6'}), (356, {'lhs': '$k352.5', 'rhs': '$index_step354.6', 'res': '$356binary_multiply.7'}), (358, {'lhs': '$offset350.4', 'rhs': '$356binary_multiply.7', 'res': '$358binary_add.8'}), (360, {'index': '$358binary_add.8', 'target': '$interp_win348.3', 'res': '$360binary_subscr.9'}), (362, {'res': '$eta362.10'}), (364, {'res': '$interp_delta364.11'}), (366, {'res': '$offset366.12'}), (368, {'res': '$k368.13'}), (370, {'res': '$index_step370.14'}), (372, {'lhs': '$k368.13', 'rhs': '$index_step370.14', 'res': '$372binary_multiply.15'}), (374, {'lhs': '$offset366.12', 'rhs': '$372binary_multiply.15', 'res': '$374binary_add.16'}), (376, {'index': '$374binary_add.16', 'target': '$interp_delta364.11', 'res': '$376binary_subscr.17'}), (378, {'lhs': '$eta362.10', 'rhs': '$376binary_subscr.17', 'res': '$378binary_multiply.18'}), (380, {'lhs': '$360binary_subscr.9', 'rhs': '$378binary_multiply.18', 'res': '$380binary_add.19'}), (382, {'value': '$380binary_add.19'}), (384, {'res': '$384load_global.20'}), (386, {'res': '$n_channels386.21'}), (388, {'func': '$384load_global.20', 'args': ['$n_channels386.21'], 'res': '$388call_function.22'}), (390, {'value': '$388call_function.22', 'res': '$390get_iter.23'})), outgoing_phis={'$phi392.2': '$390get_iter.23'}, blockstack=(), active_try_block=None, outgoing_edgepushed={392: ('$phi346.0', '$phi346.1', '$390get_iter.23')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=392 nstack_initial=3):
AdaptBlockInfo(insts=((392, {'iterator': '$phi392.2', 'pair': '$392for_iter.3', 'indval': '$392for_iter.4', 'pred': '$392for_iter.5'}),), outgoing_phis={'$phi394.3': '$392for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={438: ('$phi392.0', '$phi392.1'), 394: ('$phi392.0', '$phi392.1', '$phi392.2', '$392for_iter.4')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=394 nstack_initial=4):
AdaptBlockInfo(insts=((394, {'value': '$phi394.3'}), (396, {'res': '$y396.4'}), (398, {'res': '$t398.5'}), (400, {'res': '$j400.6'}), (402, {'items': ['$t398.5', '$j400.6'], 'res': '$402build_tuple.7'}), (404, {'orig': ['$y396.4', '$402build_tuple.7'], 'duped': ['$404dup_top_two.8', '$404dup_top_two.9']}), (406, {'index': '$404dup_top_two.9', 'target': '$404dup_top_two.8', 'res': '$406binary_subscr.10'}), (408, {'res': '$weight408.11'}), (410, {'res': '$x410.12'}), (412, {'res': '$n412.13'}), (414, {'res': '$k414.14'}), (416, {'lhs': '$n412.13', 'rhs': '$k414.14', 'res': '$416binary_add.15'}), (418, {'res': '$const418.16'}), (420, {'lhs': '$416binary_add.15', 'rhs': '$const418.16', 'res': '$420binary_add.17'}), (422, {'res': '$j422.18'}), (424, {'items': ['$420binary_add.17', '$j422.18'], 'res': '$424build_tuple.19'}), (426, {'index': '$424build_tuple.19', 'target': '$x410.12', 'res': '$426binary_subscr.20'}), (428, {'lhs': '$weight408.11', 'rhs': '$426binary_subscr.20', 'res': '$428binary_multiply.21'}), (430, {'lhs': '$406binary_subscr.10', 'rhs': '$428binary_multiply.21', 'res': '$430inplace_add.22'}), (434, {'target': '$y396.4', 'index': '$402build_tuple.7', 'value': '$430inplace_add.22'}), (436, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={392: ('$phi394.0', '$phi394.1', '$phi394.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=438 nstack_initial=2):
AdaptBlockInfo(insts=((438, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: ('$phi438.0', '$phi438.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=440 nstack_initial=1):
AdaptBlockInfo(insts=((440, {'res': '$time_register440.1'}), (442, {'res': '$time_increment442.2'}), (444, {'lhs': '$time_register440.1', 'rhs': '$time_increment442.2', 'res': '$444inplace_add.3'}), (446, {'value': '$444inplace_add.3'}), (448, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ('$phi440.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=450 nstack_initial=0):
AdaptBlockInfo(insts=((450, {'res': '$const450.0'}), (452, {'retval': '$const450.0', 'castval': '$452return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    sample_ratio = arg(2, name=sample_ratio) ['sample_ratio']
    interp_win = arg(3, name=interp_win)     ['interp_win']
    interp_delta = arg(4, name=interp_delta) ['interp_delta']
    num_table = arg(5, name=num_table)       ['num_table']
    $2load_global.0 = global(min: <built-in function min>) ['$2load_global.0']
    $const4.1 = const(float, 1.0)            ['$const4.1']
    scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None) ['$2load_global.0', '$const4.1', 'sample_ratio', 'scale']
    $const12.4 = const(float, 1.0)           ['$const12.4']
    time_increment = $const12.4 / sample_ratio ['$const12.4', 'sample_ratio', 'time_increment']
    $20load_global.7 = global(int: <class 'int'>) ['$20load_global.7']
    $26binary_multiply.10 = scale * num_table ['$26binary_multiply.10', 'num_table', 'scale']
    index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None) ['$20load_global.7', '$26binary_multiply.10', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $62load_attr.20 = getattr(value=interp_win, attr=shape) ['$62load_attr.20', 'interp_win']
    $const64.21 = const(int, 0)              ['$const64.21']
    nwin = getitem(value=$62load_attr.20, index=$const64.21, fn=<built-in function getitem>) ['$62load_attr.20', '$const64.21', 'nwin']
    $72load_attr.24 = getattr(value=x, attr=shape) ['$72load_attr.24', 'x']
    $const74.25 = const(int, 0)              ['$const74.25']
    n_orig = getitem(value=$72load_attr.24, index=$const74.25, fn=<built-in function getitem>) ['$72load_attr.24', '$const74.25', 'n_orig']
    $82load_attr.28 = getattr(value=y, attr=shape) ['$82load_attr.28', 'y']
    $const84.29 = const(int, 0)              ['$const84.29']
    n_out = getitem(value=$82load_attr.28, index=$const84.29, fn=<built-in function getitem>) ['$82load_attr.28', '$const84.29', 'n_out']
    $92load_attr.32 = getattr(value=y, attr=shape) ['$92load_attr.32', 'y']
    $const94.33 = const(int, 1)              ['$const94.33']
    n_channels = getitem(value=$92load_attr.32, index=$const94.33, fn=<built-in function getitem>) ['$92load_attr.32', '$const94.33', 'n_channels']
    $100load_global.35 = global(range: <class 'range'>) ['$100load_global.35']
    $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None) ['$100load_global.35', '$104call_function.37', 'n_out']
    $106get_iter.38 = getiter(value=$104call_function.37) ['$104call_function.37', '$106get_iter.38']
    $phi108.0 = $106get_iter.38              ['$106get_iter.38', '$phi108.0']
    jump 108                                 []
label 108:
    $108for_iter.1 = iternext(value=$phi108.0) ['$108for_iter.1', '$phi108.0']
    $108for_iter.2 = pair_first(value=$108for_iter.1) ['$108for_iter.1', '$108for_iter.2']
    $108for_iter.3 = pair_second(value=$108for_iter.1) ['$108for_iter.1', '$108for_iter.3']
    $phi110.1 = $108for_iter.2               ['$108for_iter.2', '$phi110.1']
    branch $108for_iter.3, 110, 450          ['$108for_iter.3']
label 110:
    t = $phi110.1                            ['$phi110.1', 't']
    $112load_global.2 = global(int: <class 'int'>) ['$112load_global.2']
    n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None) ['$112load_global.2', 'n', 'time_register']
    $126binary_subtract.8 = time_register - n ['$126binary_subtract.8', 'n', 'time_register']
    frac = scale * $126binary_subtract.8     ['$126binary_subtract.8', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $140load_global.13 = global(int: <class 'int'>) ['$140load_global.13']
    offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None) ['$140load_global.13', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $156load_global.19 = global(min: <built-in function min>) ['$156load_global.19']
    $const160.21 = const(int, 1)             ['$const160.21']
    $162binary_add.22 = n + $const160.21     ['$162binary_add.22', '$const160.21', 'n']
    $168binary_subtract.25 = nwin - offset   ['$168binary_subtract.25', 'nwin', 'offset']
    $172binary_floor_divide.27 = $168binary_subtract.25 // index_step ['$168binary_subtract.25', '$172binary_floor_divide.27', 'index_step']
    i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None) ['$156load_global.19', '$162binary_add.22', '$172binary_floor_divide.27', 'i_max']
    $178load_global.29 = global(range: <class 'range'>) ['$178load_global.29']
    $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None) ['$178load_global.29', '$182call_function.31', 'i_max']
    $184get_iter.32 = getiter(value=$182call_function.31) ['$182call_function.31', '$184get_iter.32']
    $phi186.1 = $184get_iter.32              ['$184get_iter.32', '$phi186.1']
    jump 186                                 []
label 186:
    $186for_iter.2 = iternext(value=$phi186.1) ['$186for_iter.2', '$phi186.1']
    $186for_iter.3 = pair_first(value=$186for_iter.2) ['$186for_iter.2', '$186for_iter.3']
    $186for_iter.4 = pair_second(value=$186for_iter.2) ['$186for_iter.2', '$186for_iter.4']
    $phi188.2 = $186for_iter.3               ['$186for_iter.3', '$phi188.2']
    branch $186for_iter.4, 188, 278          ['$186for_iter.4']
label 188:
    i = $phi188.2                            ['$phi188.2', 'i']
    $198binary_multiply.7 = i * index_step   ['$198binary_multiply.7', 'i', 'index_step']
    $200binary_add.8 = offset + $198binary_multiply.7 ['$198binary_multiply.7', '$200binary_add.8', 'offset']
    $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>) ['$200binary_add.8', '$202binary_subscr.9', 'interp_win']
    $214binary_multiply.15 = i * index_step  ['$214binary_multiply.15', 'i', 'index_step']
    $216binary_add.16 = offset + $214binary_multiply.15 ['$214binary_multiply.15', '$216binary_add.16', 'offset']
    $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>) ['$216binary_add.16', '$218binary_subscr.17', 'interp_delta']
    $220binary_multiply.18 = eta * $218binary_subscr.17 ['$218binary_subscr.17', '$220binary_multiply.18', 'eta']
    weight = $202binary_subscr.9 + $220binary_multiply.18 ['$202binary_subscr.9', '$220binary_multiply.18', 'weight']
    $226load_global.20 = global(range: <class 'range'>) ['$226load_global.20']
    $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None) ['$226load_global.20', '$230call_function.22', 'n_channels']
    $232get_iter.23 = getiter(value=$230call_function.22) ['$230call_function.22', '$232get_iter.23']
    $phi234.2 = $232get_iter.23              ['$232get_iter.23', '$phi234.2']
    jump 234                                 []
label 234:
    $234for_iter.3 = iternext(value=$phi234.2) ['$234for_iter.3', '$phi234.2']
    $234for_iter.4 = pair_first(value=$234for_iter.3) ['$234for_iter.3', '$234for_iter.4']
    $234for_iter.5 = pair_second(value=$234for_iter.3) ['$234for_iter.3', '$234for_iter.5']
    $phi236.3 = $234for_iter.4               ['$234for_iter.4', '$phi236.3']
    branch $234for_iter.5, 236, 276          ['$234for_iter.5']
label 236:
    j = $phi236.3                            ['$phi236.3', 'j']
    $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)]) ['$244build_tuple.7', 'j', 't']
    $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>) ['$244build_tuple.7', '$248binary_subscr.10', 'y']
    $258binary_subtract.15 = n - i           ['$258binary_subtract.15', 'i', 'n']
    $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)]) ['$258binary_subtract.15', '$262build_tuple.17', 'j']
    $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>) ['$262build_tuple.17', '$264binary_subscr.18', 'x']
    $266binary_multiply.19 = weight * $264binary_subscr.18 ['$264binary_subscr.18', '$266binary_multiply.19', 'weight']
    $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined) ['$248binary_subscr.10', '$266binary_multiply.19', '$268inplace_add.20']
    y[$244build_tuple.7] = $268inplace_add.20 ['$244build_tuple.7', '$268inplace_add.20', 'y']
    jump 234                                 []
label 276:
    jump 186                                 []
label 278:
    $282binary_subtract.3 = scale - frac     ['$282binary_subtract.3', 'frac', 'scale']
    frac = $282binary_subtract.3             ['$282binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $294load_global.7 = global(int: <class 'int'>) ['$294load_global.7']
    offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None) ['$294load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $310load_global.13 = global(min: <built-in function min>) ['$310load_global.13']
    $316binary_subtract.16 = n_orig - n      ['$316binary_subtract.16', 'n', 'n_orig']
    $const318.17 = const(int, 1)             ['$const318.17']
    $320binary_subtract.18 = $316binary_subtract.16 - $const318.17 ['$316binary_subtract.16', '$320binary_subtract.18', '$const318.17']
    $326binary_subtract.21 = nwin - offset   ['$326binary_subtract.21', 'nwin', 'offset']
    $330binary_floor_divide.23 = $326binary_subtract.21 // index_step ['$326binary_subtract.21', '$330binary_floor_divide.23', 'index_step']
    k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None) ['$310load_global.13', '$320binary_subtract.18', '$330binary_floor_divide.23', 'k_max']
    $336load_global.25 = global(range: <class 'range'>) ['$336load_global.25']
    $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None) ['$336load_global.25', '$340call_function.27', 'k_max']
    $342get_iter.28 = getiter(value=$340call_function.27) ['$340call_function.27', '$342get_iter.28']
    $phi344.1 = $342get_iter.28              ['$342get_iter.28', '$phi344.1']
    jump 344                                 []
label 344:
    $344for_iter.2 = iternext(value=$phi344.1) ['$344for_iter.2', '$phi344.1']
    $344for_iter.3 = pair_first(value=$344for_iter.2) ['$344for_iter.2', '$344for_iter.3']
    $344for_iter.4 = pair_second(value=$344for_iter.2) ['$344for_iter.2', '$344for_iter.4']
    $phi346.2 = $344for_iter.3               ['$344for_iter.3', '$phi346.2']
    branch $344for_iter.4, 346, 440          ['$344for_iter.4']
label 346:
    k = $phi346.2                            ['$phi346.2', 'k']
    $356binary_multiply.7 = k * index_step   ['$356binary_multiply.7', 'index_step', 'k']
    $358binary_add.8 = offset + $356binary_multiply.7 ['$356binary_multiply.7', '$358binary_add.8', 'offset']
    $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>) ['$358binary_add.8', '$360binary_subscr.9', 'interp_win']
    $372binary_multiply.15 = k * index_step  ['$372binary_multiply.15', 'index_step', 'k']
    $374binary_add.16 = offset + $372binary_multiply.15 ['$372binary_multiply.15', '$374binary_add.16', 'offset']
    $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>) ['$374binary_add.16', '$376binary_subscr.17', 'interp_delta']
    $378binary_multiply.18 = eta * $376binary_subscr.17 ['$376binary_subscr.17', '$378binary_multiply.18', 'eta']
    weight = $360binary_subscr.9 + $378binary_multiply.18 ['$360binary_subscr.9', '$378binary_multiply.18', 'weight']
    $384load_global.20 = global(range: <class 'range'>) ['$384load_global.20']
    $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None) ['$384load_global.20', '$388call_function.22', 'n_channels']
    $390get_iter.23 = getiter(value=$388call_function.22) ['$388call_function.22', '$390get_iter.23']
    $phi392.2 = $390get_iter.23              ['$390get_iter.23', '$phi392.2']
    jump 392                                 []
label 392:
    $392for_iter.3 = iternext(value=$phi392.2) ['$392for_iter.3', '$phi392.2']
    $392for_iter.4 = pair_first(value=$392for_iter.3) ['$392for_iter.3', '$392for_iter.4']
    $392for_iter.5 = pair_second(value=$392for_iter.3) ['$392for_iter.3', '$392for_iter.5']
    $phi394.3 = $392for_iter.4               ['$392for_iter.4', '$phi394.3']
    branch $392for_iter.5, 394, 438          ['$392for_iter.5']
label 394:
    j = $phi394.3                            ['$phi394.3', 'j']
    $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)]) ['$402build_tuple.7', 'j', 't']
    $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>) ['$402build_tuple.7', '$406binary_subscr.10', 'y']
    $416binary_add.15 = n + k                ['$416binary_add.15', 'k', 'n']
    $const418.16 = const(int, 1)             ['$const418.16']
    $420binary_add.17 = $416binary_add.15 + $const418.16 ['$416binary_add.15', '$420binary_add.17', '$const418.16']
    $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)]) ['$420binary_add.17', '$424build_tuple.19', 'j']
    $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>) ['$424build_tuple.19', '$426binary_subscr.20', 'x']
    $428binary_multiply.21 = weight * $426binary_subscr.20 ['$426binary_subscr.20', '$428binary_multiply.21', 'weight']
    $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined) ['$406binary_subscr.10', '$428binary_multiply.21', '$430inplace_add.22']
    y[$402build_tuple.7] = $430inplace_add.22 ['$402build_tuple.7', '$430inplace_add.22', 'y']
    jump 392                                 []
label 438:
    jump 344                                 []
label 440:
    $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined) ['$444inplace_add.3', 'time_increment', 'time_register']
    time_register = $444inplace_add.3        ['$444inplace_add.3', 'time_register']
    jump 108                                 []
label 450:
    $const450.0 = const(NoneType, None)      ['$const450.0']
    $452return_value.1 = cast(value=$const450.0) ['$452return_value.1', '$const450.0']
    return $452return_value.1                ['$452return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block analysis pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block analysis pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block analysis pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block analysis pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block analysis pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block analysis pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block analysis pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block analysis pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block analysis pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block analysis pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block analysis pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block analysis pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block analysis pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block analysis pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block analysis pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E90AC43A30>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$100load_global.35': [<numba.core.ir.Assign object at 0x000001E90AC28700>],
             '$104call_function.37': [<numba.core.ir.Assign object at 0x000001E90AC28A00>],
             '$106get_iter.38': [<numba.core.ir.Assign object at 0x000001E90AC28B20>],
             '$108for_iter.1': [<numba.core.ir.Assign object at 0x000001E90ABD6050>],
             '$108for_iter.2': [<numba.core.ir.Assign object at 0x000001E90ABD6830>],
             '$108for_iter.3': [<numba.core.ir.Assign object at 0x000001E90ABD7190>],
             '$112load_global.2': [<numba.core.ir.Assign object at 0x000001E90AC28CA0>],
             '$126binary_subtract.8': [<numba.core.ir.Assign object at 0x000001E90AC29510>],
             '$140load_global.13': [<numba.core.ir.Assign object at 0x000001E90AC29D20>],
             '$156load_global.19': [<numba.core.ir.Assign object at 0x000001E90AC2A680>],
             '$162binary_add.22': [<numba.core.ir.Assign object at 0x000001E90AC2AAD0>],
             '$168binary_subtract.25': [<numba.core.ir.Assign object at 0x000001E90AC2AE90>],
             '$172binary_floor_divide.27': [<numba.core.ir.Assign object at 0x000001E90AC2B130>],
             '$178load_global.29': [<numba.core.ir.Assign object at 0x000001E90AC2B520>],
             '$182call_function.31': [<numba.core.ir.Assign object at 0x000001E90AC2B820>],
             '$184get_iter.32': [<numba.core.ir.Assign object at 0x000001E90AC2B940>],
             '$186for_iter.2': [<numba.core.ir.Assign object at 0x000001E90AC29840>],
             '$186for_iter.3': [<numba.core.ir.Assign object at 0x000001E90AC29A50>],
             '$186for_iter.4': [<numba.core.ir.Assign object at 0x000001E90AC29F30>],
             '$198binary_multiply.7': [<numba.core.ir.Assign object at 0x000001E90AC2BEB0>],
             '$200binary_add.8': [<numba.core.ir.Assign object at 0x000001E90AC30070>],
             '$202binary_subscr.9': [<numba.core.ir.Assign object at 0x000001E90AC301F0>],
             '$20load_global.7': [<numba.core.ir.Assign object at 0x000001E90ABD5180>],
             '$214binary_multiply.15': [<numba.core.ir.Assign object at 0x000001E90AC30910>],
             '$216binary_add.16': [<numba.core.ir.Assign object at 0x000001E90AC30A90>],
             '$218binary_subscr.17': [<numba.core.ir.Assign object at 0x000001E90AC30C10>],
             '$220binary_multiply.18': [<numba.core.ir.Assign object at 0x000001E90AC30D90>],
             '$226load_global.20': [<numba.core.ir.Assign object at 0x000001E90AC31120>],
             '$230call_function.22': [<numba.core.ir.Assign object at 0x000001E90AC31420>],
             '$232get_iter.23': [<numba.core.ir.Assign object at 0x000001E90AC31540>],
             '$234for_iter.3': [<numba.core.ir.Assign object at 0x000001E90AC30760>],
             '$234for_iter.4': [<numba.core.ir.Assign object at 0x000001E90AC31240>],
             '$234for_iter.5': [<numba.core.ir.Assign object at 0x000001E90AC31690>],
             '$244build_tuple.7': [<numba.core.ir.Assign object at 0x000001E90AC31E70>],
             '$248binary_subscr.10': [<numba.core.ir.Assign object at 0x000001E90AC321D0>],
             '$258binary_subtract.15': [<numba.core.ir.Assign object at 0x000001E90AC327D0>],
             '$262build_tuple.17': [<numba.core.ir.Assign object at 0x000001E90AC32A70>],
             '$264binary_subscr.18': [<numba.core.ir.Assign object at 0x000001E90AC32BF0>],
             '$266binary_multiply.19': [<numba.core.ir.Assign object at 0x000001E90AC32D70>],
             '$268inplace_add.20': [<numba.core.ir.Assign object at 0x000001E90AC32EF0>],
             '$26binary_multiply.10': [<numba.core.ir.Assign object at 0x000001E90ABD5570>],
             '$282binary_subtract.3': [<numba.core.ir.Assign object at 0x000001E90AC332B0>],
             '$294load_global.7': [<numba.core.ir.Assign object at 0x000001E90AC33940>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001E90ABD4580>],
             '$310load_global.13': [<numba.core.ir.Assign object at 0x000001E90AC382E0>],
             '$316binary_subtract.16': [<numba.core.ir.Assign object at 0x000001E90AC386D0>],
             '$320binary_subtract.18': [<numba.core.ir.Assign object at 0x000001E90AC389D0>],
             '$326binary_subtract.21': [<numba.core.ir.Assign object at 0x000001E90AC38D90>],
             '$330binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000001E90AC39030>],
             '$336load_global.25': [<numba.core.ir.Assign object at 0x000001E90AC39420>],
             '$340call_function.27': [<numba.core.ir.Assign object at 0x000001E90AC39720>],
             '$342get_iter.28': [<numba.core.ir.Assign object at 0x000001E90AC39840>],
             '$344for_iter.2': [<numba.core.ir.Assign object at 0x000001E90AC33B80>],
             '$344for_iter.3': [<numba.core.ir.Assign object at 0x000001E90AC31CC0>],
             '$344for_iter.4': [<numba.core.ir.Assign object at 0x000001E90AC38520>],
             '$356binary_multiply.7': [<numba.core.ir.Assign object at 0x000001E90AC39F90>],
             '$358binary_add.8': [<numba.core.ir.Assign object at 0x000001E90AC3A110>],
             '$360binary_subscr.9': [<numba.core.ir.Assign object at 0x000001E90AC3A290>],
             '$372binary_multiply.15': [<numba.core.ir.Assign object at 0x000001E90AC3A9B0>],
             '$374binary_add.16': [<numba.core.ir.Assign object at 0x000001E90AC3AB30>],
             '$376binary_subscr.17': [<numba.core.ir.Assign object at 0x000001E90AC3ACB0>],
             '$378binary_multiply.18': [<numba.core.ir.Assign object at 0x000001E90AC3AE30>],
             '$384load_global.20': [<numba.core.ir.Assign object at 0x000001E90AC3B1C0>],
             '$388call_function.22': [<numba.core.ir.Assign object at 0x000001E90AC3B4C0>],
             '$390get_iter.23': [<numba.core.ir.Assign object at 0x000001E90AC3B5E0>],
             '$392for_iter.3': [<numba.core.ir.Assign object at 0x000001E90AC3A800>],
             '$392for_iter.4': [<numba.core.ir.Assign object at 0x000001E90AC3B2E0>],
             '$392for_iter.5': [<numba.core.ir.Assign object at 0x000001E90AC3B730>],
             '$402build_tuple.7': [<numba.core.ir.Assign object at 0x000001E90AC3BEB0>],
             '$406binary_subscr.10': [<numba.core.ir.Assign object at 0x000001E90AC40250>],
             '$416binary_add.15': [<numba.core.ir.Assign object at 0x000001E90AC40850>],
             '$420binary_add.17': [<numba.core.ir.Assign object at 0x000001E90AC40B50>],
             '$424build_tuple.19': [<numba.core.ir.Assign object at 0x000001E90AC40DF0>],
             '$426binary_subscr.20': [<numba.core.ir.Assign object at 0x000001E90AC40F70>],
             '$428binary_multiply.21': [<numba.core.ir.Assign object at 0x000001E90AC410F0>],
             '$430inplace_add.22': [<numba.core.ir.Assign object at 0x000001E90AC41270>],
             '$444inplace_add.3': [<numba.core.ir.Assign object at 0x000001E90AC41630>],
             '$452return_value.1': [<numba.core.ir.Assign object at 0x000001E90AC41A80>],
             '$62load_attr.20': [<numba.core.ir.Assign object at 0x000001E90ABD6CE0>],
             '$72load_attr.24': [<numba.core.ir.Assign object at 0x000001E90ABD73A0>],
             '$82load_attr.28': [<numba.core.ir.Assign object at 0x000001E90ABD7A60>],
             '$92load_attr.32': [<numba.core.ir.Assign object at 0x000001E90AC28160>],
             '$const12.4': [<numba.core.ir.Assign object at 0x000001E90ABD4C40>],
             '$const160.21': [<numba.core.ir.Assign object at 0x000001E90AC2A920>],
             '$const318.17': [<numba.core.ir.Assign object at 0x000001E90AC38820>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001E90ABD4700>],
             '$const418.16': [<numba.core.ir.Assign object at 0x000001E90AC409A0>],
             '$const450.0': [<numba.core.ir.Assign object at 0x000001E90AC41900>],
             '$const64.21': [<numba.core.ir.Assign object at 0x000001E90ABD6E60>],
             '$const74.25': [<numba.core.ir.Assign object at 0x000001E90ABD7520>],
             '$const84.29': [<numba.core.ir.Assign object at 0x000001E90ABD7BE0>],
             '$const94.33': [<numba.core.ir.Assign object at 0x000001E90AC282E0>],
             '$phi108.0': [<numba.core.ir.Assign object at 0x000001E90ABD48B0>],
             '$phi110.1': [<numba.core.ir.Assign object at 0x000001E90ABD5B10>],
             '$phi186.1': [<numba.core.ir.Assign object at 0x000001E90AC28DC0>],
             '$phi188.2': [<numba.core.ir.Assign object at 0x000001E90AC29750>],
             '$phi234.2': [<numba.core.ir.Assign object at 0x000001E90AC2BA30>],
             '$phi236.3': [<numba.core.ir.Assign object at 0x000001E90AC30520>],
             '$phi344.1': [<numba.core.ir.Assign object at 0x000001E90AC32950>],
             '$phi346.2': [<numba.core.ir.Assign object at 0x000001E90AC33AF0>],
             '$phi392.2': [<numba.core.ir.Assign object at 0x000001E90AC39A80>],
             '$phi394.3': [<numba.core.ir.Assign object at 0x000001E90AC3A5C0>],
             'eta': [<numba.core.ir.Assign object at 0x000001E90ABD6680>,
                     <numba.core.ir.Assign object at 0x000001E90AC2A470>,
                     <numba.core.ir.Assign object at 0x000001E90AC380D0>],
             'frac': [<numba.core.ir.Assign object at 0x000001E90ABD5EA0>,
                      <numba.core.ir.Assign object at 0x000001E90AC29690>,
                      <numba.core.ir.Assign object at 0x000001E90AC33370>],
             'i': [<numba.core.ir.Assign object at 0x000001E90AC2AD70>],
             'i_max': [<numba.core.ir.Assign object at 0x000001E90AC2B2E0>],
             'index_frac': [<numba.core.ir.Assign object at 0x000001E90ABD6140>,
                            <numba.core.ir.Assign object at 0x000001E90AC29B10>,
                            <numba.core.ir.Assign object at 0x000001E90AC33730>],
             'index_step': [<numba.core.ir.Assign object at 0x000001E90ABD5720>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001E90ABD40A0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001E90ABD42B0>],
             'j': [<numba.core.ir.Assign object at 0x000001E90AC31960>,
                   <numba.core.ir.Assign object at 0x000001E90AC3B9D0>],
             'k': [<numba.core.ir.Assign object at 0x000001E90AC39960>],
             'k_max': [<numba.core.ir.Assign object at 0x000001E90AC391E0>],
             'n': [<numba.core.ir.Assign object at 0x000001E90ABD5C00>,
                   <numba.core.ir.Assign object at 0x000001E90AC28FA0>],
             'n_channels': [<numba.core.ir.Assign object at 0x000001E90AC851B0>],
             'n_orig': [<numba.core.ir.Assign object at 0x000001E90AC85030>],
             'n_out': [<numba.core.ir.Assign object at 0x000001E90AC850F0>],
             'num_table': [<numba.core.ir.Assign object at 0x000001E90ABD4280>],
             'nwin': [<numba.core.ir.Assign object at 0x000001E90AC84F40>],
             'offset': [<numba.core.ir.Assign object at 0x000001E90ABD63E0>,
                        <numba.core.ir.Assign object at 0x000001E90AC2A020>,
                        <numba.core.ir.Assign object at 0x000001E90AC33C40>],
             'sample_ratio': [<numba.core.ir.Assign object at 0x000001E90ABB26B0>],
             'scale': [<numba.core.ir.Assign object at 0x000001E90ABD4A00>],
             't': [<numba.core.ir.Assign object at 0x000001E90AC28610>],
             'time_increment': [<numba.core.ir.Assign object at 0x000001E90ABD4F10>],
             'time_register': [<numba.core.ir.Assign object at 0x000001E90ABD5960>,
                               <numba.core.ir.Assign object at 0x000001E90AC416F0>],
             'weight': [<numba.core.ir.Assign object at 0x000001E90ABD6920>,
                        <numba.core.ir.Assign object at 0x000001E90AC30F10>,
                        <numba.core.ir.Assign object at 0x000001E90AC3AFB0>],
             'x': [<numba.core.ir.Assign object at 0x000001E90ABB3040>],
             'y': [<numba.core.ir.Assign object at 0x000001E90ABB2950>]})
DEBUG:numba.core.ssa:SSA violators {'j', 'weight', 'time_register', 'frac', 'index_frac', 'eta', 'offset', 'n'}
DEBUG:numba.core.ssa:Fix SSA violator on var j
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:first assign: j
DEBUG:numba.core.ssa:replaced with: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: j = $phi394.3
DEBUG:numba.core.ssa:replaced with: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {236: [<numba.core.ir.Assign object at 0x000001E90AC439A0>],
             394: [<numba.core.ir.Assign object at 0x000001E90AC432B0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:find_def var='j' stmt=$244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:find_def var='j' stmt=$262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:find_def var='j' stmt=$402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:replaced with: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:find_def var='j' stmt=$424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:replaced with: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var weight
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: weight
DEBUG:numba.core.ssa:replaced with: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:replaced with: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:replaced with: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB28F0>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E90ABB2D40>],
             188: [<numba.core.ir.Assign object at 0x000001E90AC43A30>],
             346: [<numba.core.ir.Assign object at 0x000001E90AC431F0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:find_def var='weight' stmt=$266binary_multiply.19 = weight * $264binary_subscr.18
DEBUG:numba.core.ssa:find_def_from_top label 236
DEBUG:numba.core.ssa:idom 234 from label 236
DEBUG:numba.core.ssa:find_def_from_bottom label 234
DEBUG:numba.core.ssa:find_def_from_top label 234
DEBUG:numba.core.ssa:idom 188 from label 234
DEBUG:numba.core.ssa:find_def_from_bottom label 188
DEBUG:numba.core.ssa:replaced with: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:find_def var='weight' stmt=$428binary_multiply.21 = weight * $426binary_subscr.20
DEBUG:numba.core.ssa:find_def_from_top label 394
DEBUG:numba.core.ssa:idom 392 from label 394
DEBUG:numba.core.ssa:find_def_from_bottom label 392
DEBUG:numba.core.ssa:find_def_from_top label 392
DEBUG:numba.core.ssa:idom 346 from label 392
DEBUG:numba.core.ssa:find_def_from_bottom label 346
DEBUG:numba.core.ssa:replaced with: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43490>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var time_register
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: time_register
DEBUG:numba.core.ssa:replaced with: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register = $444inplace_add.3
DEBUG:numba.core.ssa:replaced with: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3700>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E90ABB25F0>],
             440: [<numba.core.ir.Assign object at 0x000001E90AC84520>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='time_register' stmt=n = call $112load_global.2(time_register, func=$112load_global.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 110
DEBUG:numba.core.ssa:idom 108 from label 110
DEBUG:numba.core.ssa:find_def_from_bottom label 108
DEBUG:numba.core.ssa:find_def_from_top label 108
DEBUG:numba.core.ssa:insert phi node time_register.2 = phi(incoming_values=[], incoming_blocks=[]) at 108
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def time_register = const(float, 0.0)
DEBUG:numba.core.ssa:find_def_from_bottom label 440
DEBUG:numba.core.ssa:incoming_def time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:replaced with: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:find_def var='time_register' stmt=$126binary_subtract.8 = time_register - n
DEBUG:numba.core.ssa:find_def_from_top label 110
DEBUG:numba.core.ssa:idom 108 from label 110
DEBUG:numba.core.ssa:find_def_from_bottom label 108
DEBUG:numba.core.ssa:replaced with: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='time_register' stmt=$444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 440
DEBUG:numba.core.ssa:idom 344 from label 440
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:find_def_from_top label 278
DEBUG:numba.core.ssa:idom 186 from label 278
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:find_def_from_top label 110
DEBUG:numba.core.ssa:idom 108 from label 110
DEBUG:numba.core.ssa:find_def_from_bottom label 108
DEBUG:numba.core.ssa:replaced with: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43370>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var frac
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: frac
DEBUG:numba.core.ssa:replaced with: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:replaced with: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:on stmt: frac = $282binary_subtract.3
DEBUG:numba.core.ssa:replaced with: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E90AC43490>],
             110: [<numba.core.ir.Assign object at 0x000001E90AC43A00>],
             278: [<numba.core.ir.Assign object at 0x000001E90AC84730>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:find_def var='frac' stmt=index_frac = frac * num_table
DEBUG:numba.core.ssa:replaced with: index_frac = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:find_def var='frac' stmt=$282binary_subtract.3 = scale - frac
DEBUG:numba.core.ssa:find_def_from_top label 278
DEBUG:numba.core.ssa:idom 186 from label 278
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac * num_table
DEBUG:numba.core.ssa:find_def var='frac' stmt=index_frac = frac * num_table
DEBUG:numba.core.ssa:replaced with: index_frac = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC42B00>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var index_frac
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: index_frac
DEBUG:numba.core.ssa:replaced with: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac = frac.1 * num_table
DEBUG:numba.core.ssa:replaced with: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac = frac.2 * num_table
DEBUG:numba.core.ssa:replaced with: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E90AC41F90>],
             110: [<numba.core.ir.Assign object at 0x000001E90AC43760>],
             278: [<numba.core.ir.Assign object at 0x000001E90AC866B0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='index_frac' stmt=offset = call $140load_global.13(index_frac, func=$140load_global.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: offset = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:find_def var='index_frac' stmt=eta = index_frac - offset
DEBUG:numba.core.ssa:replaced with: eta = index_frac.1 - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='index_frac' stmt=offset = call $294load_global.7(index_frac, func=$294load_global.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: offset = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac - offset
DEBUG:numba.core.ssa:find_def var='index_frac' stmt=eta = index_frac - offset
DEBUG:numba.core.ssa:replaced with: eta = index_frac.2 - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43E20>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var eta
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:first assign: eta
DEBUG:numba.core.ssa:replaced with: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac.1 - offset
DEBUG:numba.core.ssa:replaced with: eta.1 = index_frac.1 - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta = index_frac.2 - offset
DEBUG:numba.core.ssa:replaced with: eta.2 = index_frac.2 - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB3820>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E90AC43DC0>],
             110: [<numba.core.ir.Assign object at 0x000001E90AC43E50>],
             278: [<numba.core.ir.Assign object at 0x000001E90AC86140>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:find_def var='eta' stmt=$220binary_multiply.18 = eta * $218binary_subscr.17
DEBUG:numba.core.ssa:find_def_from_top label 188
DEBUG:numba.core.ssa:idom 186 from label 188
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:find_def var='eta' stmt=$378binary_multiply.18 = eta * $376binary_subscr.17
DEBUG:numba.core.ssa:find_def_from_top label 346
DEBUG:numba.core.ssa:idom 344 from label 346
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:replaced with: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var offset
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:first assign: offset
DEBUG:numba.core.ssa:replaced with: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90AC43700>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E90ABB3820>],
             110: [<numba.core.ir.Assign object at 0x000001E90AC85A50>],
             278: [<numba.core.ir.Assign object at 0x000001E90AC86A10>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset
DEBUG:numba.core.ssa:find_def var='offset' stmt=eta.1 = index_frac.1 - offset
DEBUG:numba.core.ssa:replaced with: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:find_def var='offset' stmt=$168binary_subtract.25 = nwin - offset
DEBUG:numba.core.ssa:replaced with: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:find_def var='offset' stmt=$200binary_add.8 = offset + $198binary_multiply.7
DEBUG:numba.core.ssa:find_def_from_top label 188
DEBUG:numba.core.ssa:idom 186 from label 188
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:find_def var='offset' stmt=$216binary_add.16 = offset + $214binary_multiply.15
DEBUG:numba.core.ssa:find_def_from_top label 188
DEBUG:numba.core.ssa:idom 186 from label 188
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset
DEBUG:numba.core.ssa:find_def var='offset' stmt=eta.2 = index_frac.2 - offset
DEBUG:numba.core.ssa:replaced with: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:find_def var='offset' stmt=$326binary_subtract.21 = nwin - offset
DEBUG:numba.core.ssa:replaced with: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:find_def var='offset' stmt=$358binary_add.8 = offset + $356binary_multiply.7
DEBUG:numba.core.ssa:find_def_from_top label 346
DEBUG:numba.core.ssa:idom 344 from label 346
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:replaced with: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:find_def var='offset' stmt=$374binary_add.16 = offset + $372binary_multiply.15
DEBUG:numba.core.ssa:find_def_from_top label 346
DEBUG:numba.core.ssa:idom 344 from label 346
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:replaced with: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90ABB3790>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var n
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:first assign: n
DEBUG:numba.core.ssa:replaced with: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: n.1 = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x000001E90ABB37C0>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E90AC42230>],
             110: [<numba.core.ir.Assign object at 0x000001E90AC84310>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: y = arg(1, name=y)
DEBUG:numba.core.ssa:on stmt: sample_ratio = arg(2, name=sample_ratio)
DEBUG:numba.core.ssa:on stmt: interp_win = arg(3, name=interp_win)
DEBUG:numba.core.ssa:on stmt: interp_delta = arg(4, name=interp_delta)
DEBUG:numba.core.ssa:on stmt: num_table = arg(5, name=num_table)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: scale = call $2load_global.0($const4.1, sample_ratio, func=$2load_global.0, args=[Var($const4.1, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: time_increment = $const12.4 / sample_ratio
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $26binary_multiply.10 = scale * num_table
DEBUG:numba.core.ssa:on stmt: index_step = call $20load_global.7($26binary_multiply.10, func=$20load_global.7, args=[Var($26binary_multiply.10, interpn.py:12)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: time_register = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: n = const(int, 0)
DEBUG:numba.core.ssa:on stmt: frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: index_frac = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: offset = const(int, 0)
DEBUG:numba.core.ssa:on stmt: eta = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: weight = const(float, 0.0)
DEBUG:numba.core.ssa:on stmt: $62load_attr.20 = getattr(value=interp_win, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const64.21 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: nwin = static_getitem(value=$62load_attr.20, index=0, index_var=$const64.21, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72load_attr.24 = getattr(value=x, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const74.25 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_orig = static_getitem(value=$72load_attr.24, index=0, index_var=$const74.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82load_attr.28 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const84.29 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n_out = static_getitem(value=$82load_attr.28, index=0, index_var=$const84.29, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $92load_attr.32 = getattr(value=y, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const94.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: n_channels = static_getitem(value=$92load_attr.32, index=1, index_var=$const94.33, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $100load_global.35 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $104call_function.37 = call $100load_global.35(n_out, func=$100load_global.35, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $106get_iter.38 = getiter(value=$104call_function.37)
DEBUG:numba.core.ssa:on stmt: $phi108.0 = $106get_iter.38
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[0, 440])
DEBUG:numba.core.ssa:on stmt: $108for_iter.1 = iternext(value=$phi108.0)
DEBUG:numba.core.ssa:on stmt: $108for_iter.2 = pair_first(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $108for_iter.3 = pair_second(value=$108for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi110.1 = $108for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $108for_iter.3, 110, 450
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 110
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: t = $phi110.1
DEBUG:numba.core.ssa:on stmt: $112load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: n.1 = call $112load_global.2(time_register.2, func=$112load_global.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:find_def var='n' stmt=$126binary_subtract.8 = time_register.2 - n
DEBUG:numba.core.ssa:replaced with: $126binary_subtract.8 = time_register.2 - n.1
DEBUG:numba.core.ssa:on stmt: frac.1 = scale * $126binary_subtract.8
DEBUG:numba.core.ssa:on stmt: index_frac.1 = frac.1 * num_table
DEBUG:numba.core.ssa:on stmt: $140load_global.13 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.1 = call $140load_global.13(index_frac.1, func=$140load_global.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.1 = index_frac.1 - offset.1
DEBUG:numba.core.ssa:on stmt: $156load_global.19 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $const160.21 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:find_def var='n' stmt=$162binary_add.22 = n + $const160.21
DEBUG:numba.core.ssa:replaced with: $162binary_add.22 = n.1 + $const160.21
DEBUG:numba.core.ssa:on stmt: $168binary_subtract.25 = nwin - offset.1
DEBUG:numba.core.ssa:on stmt: $172binary_floor_divide.27 = $168binary_subtract.25 // index_step
DEBUG:numba.core.ssa:on stmt: i_max = call $156load_global.19($162binary_add.22, $172binary_floor_divide.27, func=$156load_global.19, args=[Var($162binary_add.22, interpn.py:42), Var($172binary_floor_divide.27, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $178load_global.29 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $182call_function.31 = call $178load_global.29(i_max, func=$178load_global.29, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $184get_iter.32 = getiter(value=$182call_function.31)
DEBUG:numba.core.ssa:on stmt: $phi186.1 = $184get_iter.32
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 186
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: $186for_iter.2 = iternext(value=$phi186.1)
DEBUG:numba.core.ssa:on stmt: $186for_iter.3 = pair_first(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $186for_iter.4 = pair_second(value=$186for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi188.2 = $186for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $186for_iter.4, 188, 278
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 188
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: i = $phi188.2
DEBUG:numba.core.ssa:on stmt: $198binary_multiply.7 = i * index_step
DEBUG:numba.core.ssa:on stmt: $200binary_add.8 = offset.1 + $198binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $202binary_subscr.9 = getitem(value=interp_win, index=$200binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $214binary_multiply.15 = i * index_step
DEBUG:numba.core.ssa:on stmt: $216binary_add.16 = offset.1 + $214binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $218binary_subscr.17 = getitem(value=interp_delta, index=$216binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $220binary_multiply.18 = eta.1 * $218binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.1 = $202binary_subscr.9 + $220binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $226load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $230call_function.22 = call $226load_global.20(n_channels, func=$226load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $232get_iter.23 = getiter(value=$230call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi234.2 = $232get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: $234for_iter.3 = iternext(value=$phi234.2)
DEBUG:numba.core.ssa:on stmt: $234for_iter.4 = pair_first(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $234for_iter.5 = pair_second(value=$234for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi236.3 = $234for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $234for_iter.5, 236, 276
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 236
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: j = $phi236.3
DEBUG:numba.core.ssa:on stmt: $244build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $248binary_subscr.10 = getitem(value=y, index=$244build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:find_def var='n' stmt=$258binary_subtract.15 = n - i
DEBUG:numba.core.ssa:find_def_from_top label 236
DEBUG:numba.core.ssa:idom 234 from label 236
DEBUG:numba.core.ssa:find_def_from_bottom label 234
DEBUG:numba.core.ssa:find_def_from_top label 234
DEBUG:numba.core.ssa:idom 188 from label 234
DEBUG:numba.core.ssa:find_def_from_bottom label 188
DEBUG:numba.core.ssa:find_def_from_top label 188
DEBUG:numba.core.ssa:idom 186 from label 188
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $258binary_subtract.15 = n.1 - i
DEBUG:numba.core.ssa:on stmt: $262build_tuple.17 = build_tuple(items=[Var($258binary_subtract.15, interpn.py:47), Var(j, interpn.py:46)])
DEBUG:numba.core.ssa:on stmt: $264binary_subscr.18 = getitem(value=x, index=$262build_tuple.17, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $266binary_multiply.19 = weight.1 * $264binary_subscr.18
DEBUG:numba.core.ssa:on stmt: $268inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$248binary_subscr.10, rhs=$266binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$244build_tuple.7] = $268inplace_add.20
DEBUG:numba.core.ssa:on stmt: jump 234
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 276
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: jump 186
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 278
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: $282binary_subtract.3 = scale - frac.1
DEBUG:numba.core.ssa:on stmt: frac.2 = $282binary_subtract.3
DEBUG:numba.core.ssa:on stmt: index_frac.2 = frac.2 * num_table
DEBUG:numba.core.ssa:on stmt: $294load_global.7 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: offset.2 = call $294load_global.7(index_frac.2, func=$294load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: eta.2 = index_frac.2 - offset.2
DEBUG:numba.core.ssa:on stmt: $310load_global.13 = global(min: <built-in function min>)
DEBUG:numba.core.ssa:on stmt: $316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:find_def var='n' stmt=$316binary_subtract.16 = n_orig - n
DEBUG:numba.core.ssa:find_def_from_top label 278
DEBUG:numba.core.ssa:idom 186 from label 278
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $316binary_subtract.16 = n_orig - n.1
DEBUG:numba.core.ssa:on stmt: $const318.17 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $320binary_subtract.18 = $316binary_subtract.16 - $const318.17
DEBUG:numba.core.ssa:on stmt: $326binary_subtract.21 = nwin - offset.2
DEBUG:numba.core.ssa:on stmt: $330binary_floor_divide.23 = $326binary_subtract.21 // index_step
DEBUG:numba.core.ssa:on stmt: k_max = call $310load_global.13($320binary_subtract.18, $330binary_floor_divide.23, func=$310load_global.13, args=[Var($320binary_subtract.18, interpn.py:60), Var($330binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $336load_global.25 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $340call_function.27 = call $336load_global.25(k_max, func=$336load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $342get_iter.28 = getiter(value=$340call_function.27)
DEBUG:numba.core.ssa:on stmt: $phi344.1 = $342get_iter.28
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: $344for_iter.2 = iternext(value=$phi344.1)
DEBUG:numba.core.ssa:on stmt: $344for_iter.3 = pair_first(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $344for_iter.4 = pair_second(value=$344for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi346.2 = $344for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $344for_iter.4, 346, 440
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 346
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: k = $phi346.2
DEBUG:numba.core.ssa:on stmt: $356binary_multiply.7 = k * index_step
DEBUG:numba.core.ssa:on stmt: $358binary_add.8 = offset.2 + $356binary_multiply.7
DEBUG:numba.core.ssa:on stmt: $360binary_subscr.9 = getitem(value=interp_win, index=$358binary_add.8, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $372binary_multiply.15 = k * index_step
DEBUG:numba.core.ssa:on stmt: $374binary_add.16 = offset.2 + $372binary_multiply.15
DEBUG:numba.core.ssa:on stmt: $376binary_subscr.17 = getitem(value=interp_delta, index=$374binary_add.16, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $378binary_multiply.18 = eta.2 * $376binary_subscr.17
DEBUG:numba.core.ssa:on stmt: weight.2 = $360binary_subscr.9 + $378binary_multiply.18
DEBUG:numba.core.ssa:on stmt: $384load_global.20 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $388call_function.22 = call $384load_global.20(n_channels, func=$384load_global.20, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390get_iter.23 = getiter(value=$388call_function.22)
DEBUG:numba.core.ssa:on stmt: $phi392.2 = $390get_iter.23
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 392
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: $392for_iter.3 = iternext(value=$phi392.2)
DEBUG:numba.core.ssa:on stmt: $392for_iter.4 = pair_first(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $392for_iter.5 = pair_second(value=$392for_iter.3)
DEBUG:numba.core.ssa:on stmt: $phi394.3 = $392for_iter.4
DEBUG:numba.core.ssa:on stmt: branch $392for_iter.5, 394, 438
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 394
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: j.1 = $phi394.3
DEBUG:numba.core.ssa:on stmt: $402build_tuple.7 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $406binary_subscr.10 = getitem(value=y, index=$402build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $416binary_add.15 = n + k
DEBUG:numba.core.ssa:find_def var='n' stmt=$416binary_add.15 = n + k
DEBUG:numba.core.ssa:find_def_from_top label 394
DEBUG:numba.core.ssa:idom 392 from label 394
DEBUG:numba.core.ssa:find_def_from_bottom label 392
DEBUG:numba.core.ssa:find_def_from_top label 392
DEBUG:numba.core.ssa:idom 346 from label 392
DEBUG:numba.core.ssa:find_def_from_bottom label 346
DEBUG:numba.core.ssa:find_def_from_top label 346
DEBUG:numba.core.ssa:idom 344 from label 346
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:find_def_from_top label 344
DEBUG:numba.core.ssa:idom 278 from label 344
DEBUG:numba.core.ssa:find_def_from_bottom label 278
DEBUG:numba.core.ssa:find_def_from_top label 278
DEBUG:numba.core.ssa:idom 186 from label 278
DEBUG:numba.core.ssa:find_def_from_bottom label 186
DEBUG:numba.core.ssa:find_def_from_top label 186
DEBUG:numba.core.ssa:idom 110 from label 186
DEBUG:numba.core.ssa:find_def_from_bottom label 110
DEBUG:numba.core.ssa:replaced with: $416binary_add.15 = n.1 + k
DEBUG:numba.core.ssa:on stmt: $const418.16 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $420binary_add.17 = $416binary_add.15 + $const418.16
DEBUG:numba.core.ssa:on stmt: $424build_tuple.19 = build_tuple(items=[Var($420binary_add.17, interpn.py:64), Var(j.1, interpn.py:63)])
DEBUG:numba.core.ssa:on stmt: $426binary_subscr.20 = getitem(value=x, index=$424build_tuple.19, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $428binary_multiply.21 = weight.2 * $426binary_subscr.20
DEBUG:numba.core.ssa:on stmt: $430inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$406binary_subscr.10, rhs=$428binary_multiply.21, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: y[$402build_tuple.7] = $430inplace_add.22
DEBUG:numba.core.ssa:on stmt: jump 392
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 438
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: jump 344
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 440
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: $444inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: time_register.1 = $444inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 108
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 450
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x000001E90AC43EE0>
DEBUG:numba.core.ssa:on stmt: $const450.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452return_value.1 = cast(value=$const450.0)
DEBUG:numba.core.ssa:on stmt: return $452return_value.1
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.201.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:05] "GET /training HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:05] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:05] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:05] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:05] "GET /static/grafik/train_chart.png HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:17] "GET /training HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:17] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:17] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:17] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.201.141 - - [31/May/2022 15:25:17] "GET /static/grafik/train_chart.png HTTP/1.1" 200 -
INFO:werkzeug: * Detected change in 'D:\\Freelance Project\\Web_Klasifikasi_Suara\\app.py', reloading
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.201.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.23.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:15] "GET / HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:15] "GET /static/css/style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:15] "GET /static/js/app.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:15] "GET /static/js/recorder.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:19] "GET /static/buffer.gif HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:19] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:23] "GET /login HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:23] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:28] "[32mPOST /login HTTP/1.1[0m" 302 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:28] "GET /ds HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:28] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:28] "GET /static/vendor/datatables/dataTables.bootstrap4.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:29] "GET /static/vendor/datatables/dataTables.bootstrap4.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:29] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:29] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:29] "GET /static/vendor/datatables/jquery.dataTables.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:33] "GET /training HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:33] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:33] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:33] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:33] "GET /static/grafik/train_chart.png HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:54] "[35m[1mGET /training HTTP/1.1[0m" 500 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:54] "GET /training?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:54] "GET /training?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:54] "GET /training?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:38:54] "GET /training?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1" 200 -
INFO:werkzeug: * Detected change in 'D:\\Freelance Project\\Web_Klasifikasi_Suara\\app.py', reloading
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 163-677-100
WARNING:werkzeug: * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
INFO:werkzeug: * Running on http://192.168.23.141:8000/ (Press CTRL+C to quit)
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:12] "GET /training HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:12] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:12] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:12] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:12] "GET /static/grafik/train_chart.png HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:18] "GET /training HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:18] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:18] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:18] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:18] "GET /static/grafik/train_chart.png HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:20] "GET /training HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:20] "GET /static/css/sb-admin-2.min.css HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:20] "GET /static/vendor/bootstrap/js/bootstrap.bundle.min.js HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:20] "GET /static/images/undraw_profile.svg HTTP/1.1" 200 -
INFO:werkzeug:192.168.23.141 - - [01/Jun/2022 07:40:20] "GET /static/grafik/train_chart.png HTTP/1.1" 200 -
